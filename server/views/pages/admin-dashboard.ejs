<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <script src="/socket.io/socket.io.js"></script>
    <style>
        .stat-card {
            border: 1px solid #e5e7eb;
            background: white;
        }
        .stat-card:hover {
            border-color: #d1d5db;
        }
    </style>
</head>
<body class="bg-gray-200 flex h-screen">
    <%- include('../partials/admin-sidebar') %>
    
    <!-- Main Content -->
    <div class="flex-1 overflow-y-auto">
        <div class="p-6">
            <!-- Header -->
            <div class="mb-6">
                <h1 class="text-xl font-bold text-black">Dashboard</h1>
                <p class="text-sm text-gray-600 mt-1">System overview and statistics</p>
            </div>

            <!-- Stats Table -->
            <div class="bg-gray-50 border border-gray-300 rounded-lg mb-6">
                <div class="px-4 py-3 border-b border-gray-300">
                    <h2 class="text-sm font-semibold text-black">System Statistics</h2>
                </div>
                <div class="divide-y divide-gray-300">
                    <div class="px-4 py-3 flex justify-between items-center">
                        <span class="text-sm text-black">Total Clients</span>
                        <span class="text-sm font-semibold text-black"><%= stats.totalClients %></span>
                    </div>
                    <div class="px-4 py-3 flex justify-between items-center">
                        <span class="text-sm text-black">Active Sessions</span>
                        <span class="text-sm font-semibold text-black"><%= stats.activeSessions %></span>
                    </div>
                    <div class="px-4 py-3 flex justify-between items-center">
                        <span class="text-sm text-black">Today's Revenue</span>
                        <span class="text-sm font-semibold text-black">â‚±<%= stats.todayRevenue %></span>
                    </div>
                </div>
            </div>

            <!-- Quick Actions -->
            <div class="bg-gray-50 border border-gray-300 rounded-lg mb-6">
                <div class="px-4 py-3 border-b border-gray-300">
                    <h2 class="text-sm font-semibold text-black">Quick Actions</h2>
                </div>
                <div class="p-4 space-y-2">
                    <a href="/admin/clients" class="block px-3 py-2 text-sm text-black hover:bg-gray-100 rounded border border-gray-300">View Client Management</a>
                    <a href="/admin/rates" class="block px-3 py-2 text-sm text-black hover:bg-gray-100 rounded border border-gray-300">Configure Coin Rates</a>
                    <a href="/admin/network" class="block px-3 py-2 text-sm text-black hover:bg-gray-100 rounded border border-gray-300">Network Settings</a>
                    <a href="/admin/gpio" class="block px-3 py-2 text-sm text-black hover:bg-gray-100 rounded border border-gray-300">GPIO Configuration</a>
                </div>
            </div>

            <!-- System Status -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <!-- System Services -->
                <div class="bg-gray-50 border border-gray-300 rounded-lg">
                    <div class="px-4 py-3 border-b border-gray-300 flex justify-between items-center">
                        <h3 class="text-sm font-semibold text-black">System Services</h3>
                        <button onclick="refreshServiceStatus()" class="text-xs text-blue-600 hover:text-blue-700">
                            Refresh
                        </button>
                    </div>
                    <div class="divide-y divide-gray-300" id="service-status">
                        <div class="px-4 py-3 flex justify-between items-center">
                            <span class="text-sm text-black">
                                <span class="inline-block w-2 h-2 rounded-full bg-green-500 mr-2"></span>
                                PISOWifi Server
                            </span>
                            <span class="text-xs text-green-600 font-medium">Running</span>
                        </div>
                        <div class="px-4 py-3 flex justify-between items-center">
                            <span class="text-sm text-black">
                                <span id="dnsmasq-indicator" class="inline-block w-2 h-2 rounded-full bg-gray-400 mr-2"></span>
                                DHCP & DNS (dnsmasq)
                            </span>
                            <div class="flex items-center space-x-2">
                                <span id="dnsmasq-status" class="text-xs text-gray-600 font-medium">Checking...</span>
                                <button id="dnsmasq-restart" onclick="restartService('dnsmasq')" class="text-xs text-blue-600 hover:text-blue-700 px-2 py-1 border border-blue-300 rounded" style="display:none;">Restart</button>
                            </div>
                        </div>
                        <div class="px-4 py-3 flex justify-between items-center">
                            <span class="text-sm text-black">
                                <span id="hostapd-indicator" class="inline-block w-2 h-2 rounded-full bg-gray-400 mr-2"></span>
                                Access Point (hostapd)
                            </span>
                            <div class="flex items-center space-x-2">
                                <span id="hostapd-status" class="text-xs text-gray-600 font-medium">Checking...</span>
                                <button id="hostapd-restart" onclick="restartService('hostapd')" class="text-xs text-blue-600 hover:text-blue-700 px-2 py-1 border border-blue-300 rounded" style="display:none;">Restart</button>
                            </div>
                        </div>
                        <div class="px-4 py-3 flex justify-between items-center">
                            <span class="text-sm text-black">
                                <span id="iptables-indicator" class="inline-block w-2 h-2 rounded-full bg-gray-400 mr-2"></span>
                                Firewall (iptables)
                            </span>
                            <div class="flex items-center space-x-2">
                                <span id="iptables-status" class="text-xs text-gray-600 font-medium">Checking...</span>
                                <button id="iptables-restart" onclick="restartService('iptables')" class="text-xs text-blue-600 hover:text-blue-700 px-2 py-1 border border-blue-300 rounded" style="display:none;">Restart</button>
                            </div>
                        </div>
                        <div class="px-4 py-3 flex justify-between items-center">
                            <span class="text-sm text-black">
                                <span id="captive-indicator" class="inline-block w-2 h-2 rounded-full bg-gray-400 mr-2"></span>
                                Captive Portal
                            </span>
                            <div class="flex items-center space-x-2">
                                <span id="captive-status" class="text-xs text-gray-600 font-medium">Checking...</span>
                                <button id="all-restart" onclick="restartAllServices()" class="text-xs text-green-600 hover:text-green-700 px-2 py-1 border border-green-300 rounded">Restart All</button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Live Activity -->
                <div class="bg-gray-50 border border-gray-300 rounded-lg">
                    <div class="px-4 py-3 border-b border-gray-300">
                        <h3 class="text-sm font-semibold text-black">Recent Activity</h3>
                    </div>
                    <div class="p-4">
                        <div id="live-activity" class="space-y-2 max-h-40 overflow-y-auto">
                            <div class="text-xs text-gray-600 py-1 px-2 bg-gray-100 rounded border">
                                System initialized and ready
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        const socket = io();
        
        // Real-time activity updates
        socket.on('coin-detected', function(data) {
            addActivity('Coin detected - Payment in progress');
        });
        
        socket.on('client-connected', function(data) {
            addActivity('New client connected: ' + (data.macAddress || 'Unknown'));
        });
        
        socket.on('client-disconnected', function(data) {
            addActivity('Client disconnected: ' + (data.macAddress || 'Unknown'));
        });
        
        function addActivity(message) {
            const container = document.getElementById('live-activity');
            const div = document.createElement('div');
            div.className = 'text-xs text-gray-600 py-1 px-2 bg-gray-100 rounded border';
            div.innerHTML = `
                <div class="flex justify-between items-center">
                    <span>${message}</span>
                    <span class="text-gray-400">${new Date().toLocaleTimeString()}</span>
                </div>
            `;
            
            container.insertBefore(div, container.firstChild);
            
            // Keep only last 6 activities
            while (container.children.length > 6) {
                container.removeChild(container.lastChild);
            }
        }
        
        // Add initial activity
        setTimeout(() => {
            addActivity('Dashboard loaded successfully');
            refreshServiceStatus();
        }, 1000);
        
        // Function to refresh service status
        async function refreshServiceStatus() {
            try {
                const response = await fetch('/api/network/service-status', {
                    headers: {
                        'Authorization': 'Bearer ' + getCookie('auth-token')
                    }
                });
                
                if (response.ok) {
                    const status = await response.json();
                    updateServiceStatus(status);
                } else {
                    // Use default status if API fails
                    updateServiceStatus({
                        dnsmasq: { active: true, status: 'active', info: 'DHCP & DNS Server' },
                        hostapd: { active: true, status: 'active', info: 'Access Point Service' },
                        iptables: { active: true, status: 'active', info: 'Firewall Rules' }
                    });
                }
            } catch (error) {
                console.error('Failed to fetch service status:', error);
                // Show default status on error
                updateServiceStatus({
                    dnsmasq: { active: false, status: 'unknown', info: 'Status unavailable' },
                    hostapd: { active: false, status: 'unknown', info: 'Status unavailable' },
                    iptables: { active: false, status: 'unknown', info: 'Status unavailable' }
                });
            }
        }
        
        function updateServiceStatus(status) {
            // Update dnsmasq
            updateServiceIndicator('dnsmasq', status.dnsmasq);
            
            // Update hostapd
            updateServiceIndicator('hostapd', status.hostapd);
            
            // Update iptables
            updateServiceIndicator('iptables', status.iptables);
            
            // Update captive portal (based on iptables)
            const captiveActive = status.iptables?.active || false;
            updateServiceIndicator('captive', {
                active: captiveActive,
                status: captiveActive ? 'active' : 'inactive',
                info: captiveActive ? 'Redirecting unauthenticated devices' : 'Not configured'
            });
        }
        
        function updateServiceIndicator(service, statusInfo) {
            const indicator = document.getElementById(`${service}-indicator`);
            const statusText = document.getElementById(`${service}-status`);
            const restartBtn = document.getElementById(`${service}-restart`);
            
            if (indicator && statusText) {
                if (statusInfo.active) {
                    indicator.className = 'inline-block w-2 h-2 rounded-full bg-green-500 mr-2';
                    statusText.className = 'text-xs text-green-600 font-medium';
                    statusText.textContent = 'Active';
                    if (restartBtn) restartBtn.style.display = 'none';
                } else if (statusInfo.status === 'unknown') {
                    indicator.className = 'inline-block w-2 h-2 rounded-full bg-yellow-500 mr-2';
                    statusText.className = 'text-xs text-yellow-600 font-medium';
                    statusText.textContent = 'Unknown';
                    if (restartBtn) restartBtn.style.display = 'inline-block';
                } else {
                    indicator.className = 'inline-block w-2 h-2 rounded-full bg-red-500 mr-2';
                    statusText.className = 'text-xs text-red-600 font-medium';
                    statusText.textContent = 'Inactive';
                    if (restartBtn) restartBtn.style.display = 'inline-block';
                }
            }
        }
        
        async function restartService(serviceName) {
            const button = document.getElementById(`${serviceName}-restart`);
            const originalText = button.textContent;
            
            button.textContent = 'Restarting...';
            button.disabled = true;
            
            try {
                const response = await fetch('/api/network/restart-services', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + getCookie('auth-token')
                    },
                    body: JSON.stringify({ services: [serviceName] })
                });
                
                if (response.ok) {
                    const result = await response.json();
                    addActivity(`Restarted ${serviceName} service`);
                    
                    // Refresh status after restart
                    setTimeout(() => {
                        refreshServiceStatus();
                    }, 2000);
                } else {
                    addActivity(`Failed to restart ${serviceName} service`);
                }
            } catch (error) {
                console.error('Failed to restart service:', error);
                addActivity(`Error restarting ${serviceName}: ${error.message}`);
            } finally {
                button.textContent = originalText;
                button.disabled = false;
            }
        }
        
        async function restartAllServices() {
            const button = document.getElementById('all-restart');
            const originalText = button.textContent;
            
            button.textContent = 'Restarting...';
            button.disabled = true;
            
            try {
                const response = await fetch('/api/network/restart-services', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + getCookie('auth-token')
                    },
                    body: JSON.stringify({ services: ['dnsmasq', 'hostapd', 'pisowifi-captive'] })
                });
                
                if (response.ok) {
                    const result = await response.json();
                    addActivity('Restarted all network services');
                    
                    // Refresh status after restart
                    setTimeout(() => {
                        refreshServiceStatus();
                    }, 3000);
                } else {
                    addActivity('Failed to restart network services');
                }
            } catch (error) {
                console.error('Failed to restart services:', error);
                addActivity(`Error restarting services: ${error.message}`);
            } finally {
                button.textContent = originalText;
                button.disabled = false;
            }
        }
        
        function getCookie(name) {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) return parts.pop().split(';').shift();
            return '';
        }
        
        // Refresh service status every 30 seconds
        setInterval(refreshServiceStatus, 30000);
    </script>
</body>
</html>