<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="http://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <script src="/socket.io/socket.io.js"></script>
    <style>
        body {
            background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
            min-height: 100vh;
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            color: #212529;
        }
        
        .content-wrapper {
            background: white;
            min-height: 100vh;
            width: 100%;
        }
        
        .portal-header {
            text-align: center;
            margin-bottom: 0;
        }
        
        .banner-carousel {
            position: relative;
            width: 100%;
            height: 250px;
            margin-bottom: 0;
            overflow: hidden;
            background: linear-gradient(135deg, #007bff, #0056b3);
        }
        
        .portal-title-overlay {
            position: absolute;
            bottom: 20px;
            left: 20px;
            right: 20px;
            z-index: 10;
            text-align: center;
        }
        
        .portal-title-overlay h1 {
            color: white;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.8);
            margin: 0;
            font-size: 1.8rem;
        }
        
        .portal-title-overlay p {
            color: white;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.8);
            margin: 5px 0 0 0;
            font-size: 1.1rem;
        }
        
        .status-card {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 0;
            padding: 30px 20px;
            margin: 0 20px 20px 20px;
            box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);
        }
        
        .btn-portal {
            width: calc(100% - 40px);
            margin: 0 20px 10px 20px;
            padding: 12px;
            font-size: 1.1rem;
            font-weight: 600;
            border-radius: 8px;
        }
        
        .coin-animation {
            animation: coinBounce 0.6s ease-in-out;
        }
        
        @keyframes coinBounce {
            0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
            40% { transform: translateY(-10px); }
            60% { transform: translateY(-5px); }
        }
        
        @keyframes bounce {
            0%, 20%, 50%, 80%, 100% {
                transform: translateY(0);
            }
            40% {
                transform: translateY(-10px);
            }
            60% {
                transform: translateY(-5px);
            }
        }
        
        .coin-animation {
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0% {
                transform: scale(1);
            }
            50% {
                transform: scale(1.1);
            }
            100% {
                transform: scale(1);
            }
        }
        
        .progress-bar-animated {
            animation: progress-bar-stripes 1s linear infinite;
        }
        
        .countdown-container {
            border: 2px dashed #ffc107;
            padding: 20px;
            border-radius: 10px;
            background: rgba(255, 193, 7, 0.1);
        }
    </style>
</head>
<body>
    <div class="content-wrapper">
        <div class="portal-header">
            <div class="banner-carousel">
                <!-- Portal Title Overlay -->
                <div class="portal-title-overlay">
                    <h1>PISOWifi Portal</h1>
                    <p>Insert coins for internet access</p>
                </div>
            </div>
        </div>

        <div class="status-card text-center">
            <div class="mb-4">
                <div style="font-size: 2.5rem; font-weight: bold;">
                    <span style="color: #dc3545;">‚õî Disconnected</span>
                </div>
            </div>
            
            <!-- System Status Information -->
            <div class="mb-4">
                <div class="d-flex justify-content-center align-items-center gap-2 mb-2">
                    <div style="font-size: 0.85rem;">
                        üåê Internet
                    </div>
                    <div>
                        <span class="badge bg-success" style="font-size: 0.75rem;">
                            ‚úÖ Online
                        </span>
                    </div>
                </div>
            </div>
            
            <!-- Client MAC and IP Address Section -->
            <div class="text-center mb-3">
                <span style="font-size: 0.9rem; font-family: 'Courier New', monospace; color: #6c757d;">
                    MAC:AUTO-DETECT || IP:AUTO-DETECT
                </span>
            </div>
        </div>

        <div class="d-grid gap-2">
            <!-- INSERT COIN Button - Main Feature -->
            <button class="btn btn-primary btn-portal" onclick="insertCoin()">
                ü™ô INSERT COIN
            </button>
            
            <!-- WiFi Rates Button -->
            <button class="btn btn-outline-info btn-sm mt-2" onclick="showRates()" style="font-size: 0.85rem; margin: 0 20px;">
                üìã View WiFi Rates
            </button>
        </div>

        <!-- Portal Text Content -->
        <div class="text-center mt-3 p-3 bg-light rounded" style="margin: 20px;">
            <div>
                Welcome to our WiFi service! Select your package and insert coins to get started.
            </div>
        </div>
        
        <div class="text-center mt-3">
            <small class="text-muted">
                üõ°Ô∏è Secure Connection Protected
            </small>
        </div>
    </div>

    <!-- INSERT COIN Modal -->
    <div class="modal fade" id="insertCoinModal" tabindex="-1" aria-labelledby="insertCoinModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title" id="insertCoinModalLabel">
                        ü™ô INSERT COIN
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body text-center">
                    <div class="coin-animation mb-4">
                        <span style="font-size: 4rem; color: #ffc107; animation: bounce 1s infinite;">ü™ô</span>
                    </div>
                    
                    <h4 class="mb-3">Waiting for coin insertion...</h4>
                    <p class="text-muted mb-4">Insert coins to accumulate credit. The system will automatically calculate your available time.</p>
                    
                    <div class="coin-status-info bg-light p-3 rounded mb-4">
                        <div class="row">
                            <div class="col-6">
                                <strong>Total Coins:</strong><br>
                                <span id="totalCoins" class="text-success">‚Ç±0.00</span>
                            </div>
                            <div class="col-6">
                                <strong>Available Time:</strong><br>
                                <span id="availableTime" class="text-primary">0 minutes</span>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Countdown Timer -->
                    <div class="countdown-container mb-4">
                        <div class="progress mb-2">
                            <div class="progress-bar progress-bar-striped progress-bar-animated bg-warning" 
                                 role="progressbar" 
                                 id="countdownProgress" 
                                 style="width: 100%">
                            </div>
                        </div>
                        <h5>
                            Time remaining: <span id="countdownTimer" class="text-warning">60</span> seconds
                        </h5>
                    </div>
                    
                    <!-- Connect Button -->
                    <div id="coinStatus" class="text-center mb-3">
                        <button class="btn btn-success btn-lg" onclick="startSession()" id="connectBtn">
                            ‚ñ∂Ô∏è CONNECT
                        </button>
                        <p class="text-muted mt-2 mb-0">Click CONNECT to start your internet session</p>
                    </div>
                    
                    <!-- Test Coin Button for Development -->
                    <div class="text-center mb-3">
                        <button class="btn btn-outline-warning" onclick="testCoin()">
                            ‚öôÔ∏è Test Coin (Development)
                        </button>
                    </div>
                    
                    <!-- Coin Detection Animation -->
                    <div id="coinDetected" class="alert alert-success d-none">
                        <i class="fas fa-check-circle me-2"></i>
                        Coin detected! Processing payment...
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- WiFi Rates Modal -->
    <div class="modal fade" id="ratesModal" tabindex="-1" aria-labelledby="ratesModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-info text-white">
                    <h5 class="modal-title" id="ratesModalLabel">
                        <i class="fas fa-list me-2"></i>WiFi Rates
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="rates-list" id="ratesContainer">
                        <!-- Rates will be loaded here -->
                    </div>
                    
                    <div class="mt-4 p-3 bg-primary bg-opacity-10 rounded">
                        <h6 class="text-primary mb-2">
                            <i class="fas fa-info-circle me-2"></i>Rate Information
                        </h6>
                        <small class="text-muted">
                            Insert coins based on your desired internet time. Rates are calculated automatically.
                        </small>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-2"></i>Close
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="http://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Font Awesome Icons replaced with Unicode symbols for HTTP compatibility -->

    <script>
        const socket = io();
        let countdownTimer = null;
        let timeLeft = 60; // 60 seconds timeout
        let coinCheckInterval = null;
        let coinsInserted = 0;
        let availableTime = 0;

        // Load rates on page load
        loadRates();

        async function loadRates() {
            try {
                const response = await fetch('/api/rates');
                const rates = await response.json();
                
                const container = document.getElementById('ratesContainer');
                if (rates.length === 0) {
                    container.innerHTML = `
                        <div class="text-center py-4 text-muted">
                            <i class="fas fa-exclamation-circle me-2"></i>
                            No rates configured. Please contact administrator.
                        </div>
                    `;
                    return;
                }
                
                container.innerHTML = rates.map(rate => `
                    <div class="rate-item d-flex justify-content-between align-items-center p-3 mb-2 bg-light rounded">
                        <div>
                            <strong class="text-primary">${rate.name}</strong>
                            <small class="text-muted d-block">${rate.coins_required} coin(s)</small>
                        </div>
                        <div class="text-end">
                            <div class="text-success">‚Ç±${rate.price}</div>
                            <small class="text-muted">${Math.floor(rate.duration / 60)} min</small>
                        </div>
                    </div>
                `).join('');
            } catch (error) {
                console.error('Failed to load rates:', error);
            }
        }

        function insertCoin() {
            // Show the modal using Bootstrap 5 API
            const modal = new bootstrap.Modal(document.getElementById('insertCoinModal'));
            modal.show();
            
            // Reset coin tracking
            coinsInserted = 0;
            availableTime = 0;
            updateCoinDisplay();
            
            // Start countdown
            timeLeft = 60;
            document.getElementById('countdownTimer').textContent = timeLeft;
            document.getElementById('countdownProgress').style.width = '100%';
            
            startCountdown();
            startCoinDetection();
        }

        function startCountdown() {
            countdownTimer = setInterval(function() {
                timeLeft--;
                document.getElementById('countdownTimer').textContent = timeLeft;
                
                // Update progress bar
                const progressPercent = (timeLeft / 60) * 100;
                document.getElementById('countdownProgress').style.width = progressPercent + '%';
                
                // Change progress bar color as time runs out
                const progressBar = document.getElementById('countdownProgress');
                if (timeLeft <= 20) {
                    progressBar.classList.remove('bg-warning');
                    progressBar.classList.add('bg-danger');
                } else if (timeLeft <= 40) {
                    progressBar.classList.remove('bg-warning');
                    progressBar.classList.add('bg-warning');
                }
                
                if (timeLeft <= 0) {
                    clearInterval(countdownTimer);
                    clearInterval(coinCheckInterval);
                    
                    // Show timeout message
                    document.getElementById('coinStatus').innerHTML = `
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            Time expired! Please insert more coins or try again.
                        </div>
                    `;
                    
                    // Auto close modal after 3 seconds
                    setTimeout(function() {
                        bootstrap.Modal.getInstance(document.getElementById('insertCoinModal')).hide();
                    }, 3000);
                }
            }, 1000);
        }

        function startCoinDetection() {
            // Simulate coin detection or listen for real GPIO events
            coinCheckInterval = setInterval(function() {
                // This would normally check for coin insertion via API
                // For now, we'll wait for manual testing or real coin events
            }, 500);
        }

        // Socket.io events for real-time coin detection
        socket.on('coin-detected', function(data) {
            coinDetected();
        });

        function coinDetected() {
            coinsInserted++;
            
            // Coin animation
            const coinIcon = document.querySelector('.coin-animation i');
            if (coinIcon) {
                coinIcon.classList.add('coin-animation');
                setTimeout(() => coinIcon.classList.remove('coin-animation'), 600);
            }
            
            // Calculate available time (example: ‚Ç±5 = 30 minutes)
            const coinValue = 5; // ‚Ç±5 per coin
            const timePerPeso = 6; // 6 minutes per peso
            availableTime = coinsInserted * coinValue * timePerPeso;
            
            updateCoinDisplay();
            
            // Show brief coin added notification
            showCoinNotification(coinValue);
            
            // Enable connect button if coins are available
            if (coinsInserted > 0) {
                document.getElementById('coinStatus').innerHTML = `
                    <div class="text-center">
                        <button class="btn btn-success btn-lg" onclick="startSession()" id="connectBtn">
                            <i class="fas fa-play me-2"></i>CONNECT
                        </button>
                        <p class="text-success mt-2 mb-0">
                            <i class="fas fa-check-circle me-1"></i>
                            Coins detected! Click CONNECT to start your session.
                        </p>
                    </div>
                `;
            }
        }

        function updateCoinDisplay() {
            document.getElementById('totalCoins').textContent = '‚Ç±' + (coinsInserted * 5).toFixed(2);
            document.getElementById('availableTime').textContent = availableTime + ' minutes';
        }

        function showCoinNotification(amount) {
            const notification = document.createElement('div');
            notification.className = 'alert alert-success alert-dismissible fade show mt-2';
            notification.innerHTML = `
                <i class="fas fa-coins me-2"></i>
                Coin added! +‚Ç±${amount.toFixed(2)}
            `;
            notification.style.position = 'absolute';
            notification.style.top = '10px';
            notification.style.right = '10px';
            notification.style.zIndex = '9999';
            document.body.appendChild(notification);
            
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 2000);
        }

        function testCoin() {
            // Simulate coin insertion for testing
            coinDetected();
        }

        async function startSession() {
            if (coinsInserted === 0) return;
            
            // Disable connect button and show loading
            const connectBtn = document.getElementById('connectBtn');
            connectBtn.disabled = true;
            connectBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>CONNECTING...';
            
            try {
                // Get device information
                const deviceInfo = {
                    userAgent: navigator.userAgent,
                    platform: navigator.platform,
                    language: navigator.language,
                    cookieEnabled: navigator.cookieEnabled,
                    onLine: navigator.onLine,
                    screenWidth: screen.width,
                    screenHeight: screen.height,
                    timezone: Intl.DateTimeFormat().resolvedOptions().timeZone
                };
                
                // Make request to start session
                const response = await fetch('/portal/connect', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        coinsInserted: coinsInserted,
                        duration: availableTime * 60, // Convert to seconds
                        macAddress: 'auto-detect',
                        deviceInfo: deviceInfo
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    // Session started successfully
                    document.getElementById('coinStatus').innerHTML = `
                        <div class="alert alert-success">
                            <i class="fas fa-check-circle me-2"></i>
                            Session started successfully! You are now connected.
                        </div>
                    `;
                    
                    // Close modal and redirect
                    setTimeout(function() {
                        bootstrap.Modal.getInstance(document.getElementById('insertCoinModal')).hide();
                        window.location.href = 'http://www.google.com';
                    }, 2000);
                } else {
                    // Session failed
                    document.getElementById('coinStatus').innerHTML = `
                        <div class="alert alert-danger">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            ${data.message || 'Failed to start session. Please try again.'}
                        </div>
                        <button class="btn btn-success btn-lg mt-2" onclick="startSession()" id="connectBtn">
                            <i class="fas fa-play me-2"></i>CONNECT
                        </button>
                    `;
                }
            } catch (error) {
                console.error('Session start error:', error);
                document.getElementById('coinStatus').innerHTML = `
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        Connection error. Please try again.
                    </div>
                    <button class="btn btn-success btn-lg mt-2" onclick="startSession()" id="connectBtn">
                        <i class="fas fa-play me-2"></i>CONNECT
                    </button>
                `;
            }
        }
        
        function showRates() {
            // Show rates modal using Bootstrap 5 API
            const modal = new bootstrap.Modal(document.getElementById('ratesModal'));
            modal.show();
        }

        // Clean up intervals when coin modal is closed
        document.getElementById('insertCoinModal').addEventListener('hidden.bs.modal', function () {
            if (countdownTimer) clearInterval(countdownTimer);
            if (coinCheckInterval) clearInterval(coinCheckInterval);
        });
    </script>
</body>
</html>