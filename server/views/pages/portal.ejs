<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <script src="/socket.io/socket.io.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }
        
        .portal-container {
            background: white;
            border-radius: 16px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            padding: 40px;
            text-align: center;
            max-width: 400px;
            width: 100%;
        }
        
        .logo {
            font-size: 2.5rem;
            margin-bottom: 10px;
            color: #667eea;
        }
        
        .portal-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #2d3748;
            margin-bottom: 8px;
        }
        
        .portal-subtitle {
            color: #718096;
            font-size: 1rem;
            margin-bottom: 30px;
        }
        
        .status-section {
            margin-bottom: 30px;
        }
        
        .status-indicator {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            padding: 12px 20px;
            border-radius: 8px;
            font-weight: 500;
            margin-bottom: 20px;
        }
        
        .status-connected {
            background: #f0fff4;
            color: #38a169;
            border: 1px solid #9ae6b4;
        }
        
        .status-disconnected {
            background: #fff5f5;
            color: #e53e3e;
            border: 1px solid #feb2b2;
        }
        
        .device-info {
            background: #f7fafc;
            border-radius: 8px;
            padding: 16px;
            margin: 20px 0;
            font-size: 0.9rem;
            color: #4a5568;
        }
        
        .device-info div {
            margin-bottom: 4px;
        }
        
        .client-stats {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 16px;
            margin: 20px 0;
        }
        
        .stat-item {
            background: #f7fafc;
            padding: 16px;
            border-radius: 8px;
            text-align: center;
        }
        
        .stat-label {
            font-size: 0.8rem;
            color: #718096;
            margin-bottom: 4px;
        }
        
        .stat-value {
            font-size: 1.1rem;
            font-weight: 600;
            color: #2d3748;
        }
        
        .main-button {
            width: 100%;
            padding: 16px;
            border: none;
            border-radius: 10px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            margin-bottom: 12px;
        }
        
        .btn-primary {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }
        
        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 16px rgba(102, 126, 234, 0.3);
        }
        
        .btn-success {
            background: linear-gradient(135deg, #48bb78, #38a169);
            color: white;
        }
        
        .btn-success:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 16px rgba(72, 187, 120, 0.3);
        }
        
        .secondary-button {
            background: none;
            border: 1px solid #e2e8f0;
            color: #4a5568;
            padding: 10px 16px;
            border-radius: 6px;
            font-size: 0.9rem;
            cursor: pointer;
            margin: 8px;
            transition: all 0.2s ease;
        }
        
        .secondary-button:hover {
            background: #f7fafc;
        }
        
        .coin-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1000;
        }
        
        .modal-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            border-radius: 16px;
            padding: 30px;
            max-width: 350px;
            width: 90%;
            text-align: center;
        }
        
        .coin-icon {
            font-size: 3rem;
            margin-bottom: 16px;
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.1); }
        }
        
        .countdown {
            font-size: 1.2rem;
            font-weight: 600;
            color: #e53e3e;
            margin: 16px 0;
        }
        
        .coin-stats {
            background: #f7fafc;
            border-radius: 8px;
            padding: 16px;
            margin: 16px 0;
            font-size: 0.9rem;
        }
        
        .coin-stats div {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
        }
        
        .close-btn {
            position: absolute;
            top: 10px;
            right: 15px;
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #718096;
        }
        
        .footer-text {
            margin-top: 30px;
            font-size: 0.8rem;
            color: #a0aec0;
        }
        
        @media (max-width: 480px) {
            .portal-container {
                padding: 30px 20px;
            }
            
            .client-stats {
                grid-template-columns: 1fr;
                gap: 12px;
            }
        }
    </style>
</head>
<body>
    <div class="portal-container">
        <!-- Portal Header -->
        <div class="logo">üì∂</div>
        <h1 class="portal-title"><%= portalSettings.portal_title %></h1>
        <p class="portal-subtitle"><%= portalSettings.portal_subtitle %></p>
        
        <!-- Connection Status -->
        <div class="status-section">
            <div class="status-indicator <%= isAuthenticated ? 'status-connected' : 'status-disconnected' %>">
                <span><%= isAuthenticated ? '‚úÖ' : '‚ùå' %></span>
                <span><%= isAuthenticated ? 'Connected' : 'Disconnected' %></span>
            </div>
            
            <!-- Device Info -->
            <div class="device-info">
                <div><strong>MAC:</strong> <%= clientMAC %></div>
                <div><strong>IP:</strong> <%= clientIP %></div>
                <div><strong>Internet:</strong> <%= wanStatus === 'connected' ? '‚úÖ Online' : '‚ùå Offline' %></div>
            </div>
            
            <!-- Client Stats (if authenticated) -->
            <% if (isAuthenticated && clientInfo) { %>
            <div class="client-stats">
                <div class="stat-item">
                    <div class="stat-label">Time Remaining</div>
                    <div class="stat-value"><%= Math.floor(clientInfo.time_remaining / 60) %> min</div>
                </div>
                <div class="stat-item">
                    <div class="stat-label">Amount Paid</div>
                    <div class="stat-value">‚Ç±<%= (clientInfo.total_amount_paid || 5).toFixed(2) %></div>
                </div>
            </div>
            <% } %>
        </div>
        
        <!-- Main Action Buttons -->
        <div class="action-section">
            <% if (isAuthenticated && clientInfo) { %>
                <!-- Connected State -->
                <button class="main-button btn-success" onclick="window.open('http://www.google.com', '_blank')">
                    üåê Access Internet
                </button>
                <button class="secondary-button" onclick="showCoinModal()">
                    ‚è±Ô∏è Add More Time
                </button>
            <% } else { %>
                <!-- Disconnected State -->
                <button class="main-button btn-primary" onclick="showCoinModal()">
                    ü™ô Insert Coin
                </button>
                <button class="secondary-button" onclick="showRates()">
                    üí∞ View Rates
                </button>
            <% } %>
        </div>
        
        <div class="footer-text">
            üõ°Ô∏è Secure WiFi Connection
        </div>
    </div>

    <!-- Coin Insert Modal -->
    <div class="coin-modal" id="coinModal">
        <div class="modal-content">
            <button class="close-btn" onclick="closeCoinModal()">&times;</button>
            
            <div class="coin-icon">ü™ô</div>
            <h3>Insert Coins</h3>
            <p>Insert coins to get internet access</p>
            
            <div class="countdown">
                Time left: <span id="timeLeft"><%= portalSettings.coin_timeout %></span>
            </div>
            
            <div class="coin-stats">
                <div>
                    <span>Coins:</span>
                    <span id="coinCount">‚Ç±0.00</span>
                </div>
                <div>
                    <span>Time:</span>
                    <span id="timeCount">0 min</span>
                </div>
            </div>
            
            <!-- Coin Denomination Buttons -->
            <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 8px; margin: 16px 0;">
                <button onclick="addCoinToQueue(1, 1)" class="secondary-button" style="background: #f0f9ff; border-color: #0ea5e9; color: #0ea5e9;">
                    +‚Ç±1
                </button>
                <button onclick="addCoinToQueue(5, 1)" class="secondary-button" style="background: #fef3c7; border-color: #f59e0b; color: #f59e0b;">
                    +‚Ç±5
                </button>
                <button onclick="addCoinToQueue(10, 1)" class="secondary-button" style="background: #f0fdf4; border-color: #22c55e; color: #22c55e;">
                    +‚Ç±10
                </button>
            </div>
            
            <button class="main-button btn-success" onclick="connectNow()" id="connectBtn" disabled>
                ‚ñ∂Ô∏è Connect Now
            </button>
            
            <button class="secondary-button" onclick="testCoin()">
                üß™ Test Coin
            </button>
        </div>
    </div>

    <!-- Rates Modal -->
    <div class="coin-modal" id="ratesModal">
        <div class="modal-content">
            <button class="close-btn" onclick="closeRatesModal()">&times;</button>
            
            <h3>WiFi Rates</h3>
            <div id="ratesList" style="margin: 20px 0; text-align: left;">
                Loading rates...
            </div>
            
            <button class="secondary-button" onclick="closeRatesModal()">
                Close
            </button>
        </div>
    </div>

    <script>
        let countdown;
        let timeLeft = <%= portalSettings.coin_timeout %>;
        let coinsInserted = 0;
        let totalTime = 0;
        let totalValue = 0;
        let socket;
        let claimedSlot = null;
        let clientIP = '<%= clientIP %>';
        let clientMAC = '<%= clientMAC %>';
        
        // Default rate (will be updated when rates load)
        let coinValue = 5.00;
        let timePerCoin = 30; // minutes
        
        // Initialize Socket.IO for real-time coin detection
        try {
            socket = io();
            
            socket.on('connect', function() {
                console.log('Connected to server for coin detection');
            });
            
            socket.on('coin-detected', function(data) {
                console.log('Coin detected via socket:', data);
                if (document.getElementById('coinModal').style.display === 'block' && claimedSlot) {
                    // Add coin to queue via API
                    addCoinToQueue(data.value || coinValue, 1);
                }
            });
            
            socket.on('coin-slot-claimed', function(data) {
                console.log('Coin slot claimed:', data);
                if (data.clientIp === clientIP) {
                    claimedSlot = data.slot;
                    // Update countdown with actual expiration time
                    if (document.getElementById('coinModal').style.display === 'block') {
                        if (countdown) clearInterval(countdown);
                        startCountdown();
                    }
                }
            });
            
            socket.on('coin-slot-released', function(data) {
                console.log('Coin slot released:', data);
                if (data.clientIp === clientIP || (claimedSlot && data.slot && data.slot.slot_number === claimedSlot.slot_number)) {
                    claimedSlot = null;
                    if (document.getElementById('coinModal').style.display === 'block') {
                        closeCoinModal();
                    }
                }
            });
            
            socket.on('coin-added', function(data) {
                console.log('Coin added to queue:', data);
                if (data.clientIp === clientIP) {
                    updateCoinDisplayFromQueue(data.total);
                }
            });
            
            socket.on('disconnect', function() {
                console.log('Disconnected from server');
            });
        } catch (error) {
            console.warn('Socket.IO not available:', error);
        }
        
        // Load rates on page start
        loadRates();
        
        async function loadRates() {
            try {
                const response = await fetch('/api/rates');
                const rates = await response.json();
                
                if (rates.length > 0) {
                    const defaultRate = rates[0];
                    coinValue = defaultRate.price / defaultRate.coins_required;
                    timePerCoin = Math.floor(defaultRate.duration / 60 / defaultRate.coins_required);
                }
                
                // Update rates modal
                const ratesList = document.getElementById('ratesList');
                if (rates.length === 0) {
                    ratesList.innerHTML = '<div style="text-align: center; color: #718096;">No rates available</div>';
                } else {
                    ratesList.innerHTML = rates.map(rate => `
                        <div style="display: flex; justify-content: space-between; padding: 12px; background: #f7fafc; border-radius: 6px; margin-bottom: 8px;">
                            <div>
                                <div style="font-weight: 600;">${rate.name}</div>
                                <div style="font-size: 0.8rem; color: #718096;">${rate.coins_required} coin(s)</div>
                            </div>
                            <div style="text-align: right;">
                                <div style="font-weight: 600; color: #38a169;">‚Ç±${parseFloat(rate.price).toFixed(2)}</div>
                                <div style="font-size: 0.8rem; color: #718096;">${Math.floor(rate.duration / 60)} min</div>
                            </div>
                        </div>
                    `).join('');
                }
            } catch (error) {
                console.error('Failed to load rates:', error);
            }
        }
        
        async function showCoinModal() {
            // Try to claim coin slot 1 (Orange Pi standalone has only one physical coin slot)
            try {
                const response = await fetch('/api/coin-slots/slots/1/claim', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        clientIp: clientIP,
                        clientMac: clientMAC,
                        timeoutMinutes: 5
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    claimedSlot = data.slot;
                    console.log('Claimed coin slot 1:', claimedSlot.slot_number);
                    
                    document.getElementById('coinModal').style.display = 'block';
                    startCountdown();
                    await loadExistingQueue();
                } else {
                    // Orange Pi has only one coin slot, so show appropriate message
                    console.warn('Coin slot 1 is busy:', data.error);
                    alert('The coin slot is currently in use by another client. Please wait and try again in a few minutes.');
                    return;
                }
            } catch (error) {
                console.error('Failed to claim coin slot:', error);
                alert('Unable to access coin slot system. The hardware may be busy or unavailable.');
            }
        }
        
        async function closeCoinModal() {
            document.getElementById('coinModal').style.display = 'none';
            if (countdown) clearInterval(countdown);
            
            // Release the claimed slot but preserve queued coins
            if (claimedSlot) {
                try {
                    await fetch(`/api/coin-slots/slots/${claimedSlot.slot_number}/release`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            clientIp: clientIP,
                            clientMac: clientMAC,
                            preserveQueues: true // Keep queued coins for this client
                        })
                    });
                    console.log('Released slot:', claimedSlot.slot_number, '- queued coins preserved for', clientMAC || clientIP);
                } catch (error) {
                    console.warn('Failed to release slot:', error);
                }
                claimedSlot = null;
            }
            
            // Show a message if there are queued coins
            if (totalValue > 0) {
                console.log(`You have ‚Ç±${totalValue.toFixed(2)} in queued coins that will be saved for your next visit`);
            }
        }
        
        function showRates() {
            document.getElementById('ratesModal').style.display = 'block';
        }
        
        function closeRatesModal() {
            document.getElementById('ratesModal').style.display = 'none';
        }
        
        function startCountdown() {
            // Use the actual slot expiration time from the server
            if (claimedSlot && claimedSlot.expires_at) {
                const expiresAt = new Date(claimedSlot.expires_at);
                updateCountdownDisplay(expiresAt);
                
                countdown = setInterval(() => {
                    updateCountdownDisplay(expiresAt);
                }, 1000);
            } else {
                // Fallback to portal settings timeout
                timeLeft = <%= portalSettings.coin_timeout %>;
                document.getElementById('timeLeft').textContent = timeLeft;
                
                countdown = setInterval(() => {
                    timeLeft--;
                    document.getElementById('timeLeft').textContent = timeLeft;
                    
                    if (timeLeft <= 0) {
                        clearInterval(countdown);
                        closeCoinModal();
                    }
                }, 1000);
            }
        }
        
        function updateCountdownDisplay(expiresAt) {
            const now = new Date();
            const remainingMs = expiresAt - now;
            
            if (remainingMs > 0) {
                const minutes = Math.floor(remainingMs / 60000);
                const seconds = Math.floor((remainingMs % 60000) / 1000);
                const timeLeftSeconds = Math.floor(remainingMs / 1000);
                
                // Update display with MM:SS format
                document.getElementById('timeLeft').textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
                
                // Update global timeLeft for compatibility
                timeLeft = timeLeftSeconds;
            } else {
                document.getElementById('timeLeft').textContent = 'Expired';
                clearInterval(countdown);
                closeCoinModal();
            }
        }
        
        async function loadExistingQueue() {
            try {
                // Load any existing queues for this client (including preserved ones)
                const response = await fetch(`/api/coin-slots/queues/client?clientIp=${encodeURIComponent(clientIP)}&clientMac=${encodeURIComponent(clientMAC)}&includePreserved=true`);
                const data = await response.json();
                
                if (data.success && data.total) {
                    updateCoinDisplayFromQueue(data.total);
                    
                    // Show message if coins were restored from previous session
                    if (data.total.total_coins > 0 && data.preserved) {
                        const welcomeMsg = `üí∞ Welcome back! You have ‚Ç±${data.total.total_value} in saved coins from your previous visit.`;
                        setTimeout(() => {
                            const coinStats = document.querySelector('.coin-stats');
                            if (coinStats) {
                                const welcomeDiv = document.createElement('div');
                                welcomeDiv.className = 'bg-green-50 border border-green-200 rounded p-2 mt-2 text-sm text-green-700';
                                welcomeDiv.textContent = welcomeMsg;
                                coinStats.parentNode.insertBefore(welcomeDiv, coinStats.nextSibling);
                                
                                // Remove message after 5 seconds
                                setTimeout(() => {
                                    if (welcomeDiv.parentNode) {
                                        welcomeDiv.parentNode.removeChild(welcomeDiv);
                                    }
                                }, 5000);
                            }
                        }, 500);
                    }
                } else {
                    resetCoins();
                }
            } catch (error) {
                console.warn('Failed to load existing queue:', error);
                resetCoins();
            }
        }
        
        function resetCoins() {
            coinsInserted = 0;
            totalTime = 0;
            totalValue = 0;
            updateCoinDisplay();
        }
        
        async function testCoin() {
            if (!claimedSlot) {
                alert('No coin slot claimed. Please try again.');
                return;
            }
            
            // Add test coin to queue
            await addCoinToQueue(coinValue, 1);
        }
        
        async function addCoinToQueue(value, count = 1) {
            if (!claimedSlot) {
                console.warn('No slot claimed, cannot add coin');
                return;
            }
            
            try {
                const response = await fetch(`/api/coin-slots/slots/${claimedSlot.slot_number}/add-coin`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        clientIp: clientIP,
                        clientMac: clientMAC,
                        coinValue: value,
                        coinCount: count
                    })
                });
                
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('HTTP Error:', response.status, response.statusText, errorText);
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                if (data.success) {
                    updateCoinDisplayFromQueue(data.total);
                    
                    // Visual feedback
                    const coinIcon = document.querySelector('.coin-icon');
                    if (coinIcon) {
                        coinIcon.style.animation = 'pulse 0.6s ease-in-out';
                        setTimeout(() => {
                            coinIcon.style.animation = 'pulse 2s infinite';
                        }, 600);
                    }
                    
                    console.log('Coin added successfully:', data.message);
                } else {
                    console.error('Failed to add coin to queue:', data.error);
                    alert('Failed to add coin: ' + data.error);
                }
            } catch (error) {
                console.error('Add coin to queue error:', error.message);
                alert('Error adding coin: ' + error.message);
            }
        }
        
        function updateCoinDisplayFromQueue(queueTotal) {
            coinsInserted = queueTotal.total_coins || 0;
            totalValue = parseFloat(queueTotal.total_value) || 0;
            totalTime = Math.floor((totalValue / coinValue) * timePerCoin);
            updateCoinDisplay();
            
            // Enable connect button if coins added
            const connectBtn = document.getElementById('connectBtn');
            if (coinsInserted > 0) {
                connectBtn.disabled = false;
                connectBtn.style.opacity = '1';
            }
        }
        
        function updateCoinDisplay() {
            document.getElementById('coinCount').textContent = '‚Ç±' + totalValue.toFixed(2);
            document.getElementById('timeCount').textContent = totalTime + ' min';
        }
        
        async function connectNow() {
            if (coinsInserted === 0 || totalValue === 0) {
                alert('Please insert coins first');
                return;
            }
            
            const connectBtn = document.getElementById('connectBtn');
            connectBtn.textContent = '‚è≥ Redeeming coins...';
            connectBtn.disabled = true;
            
            try {
                // First, redeem all queued coins
                const redeemResponse = await fetch('/api/coin-slots/queues/redeem', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        clientIp: clientIP,
                        clientMac: clientMAC
                    })
                });
                
                const redeemData = await redeemResponse.json();
                if (!redeemData.success) {
                    throw new Error('Failed to redeem coins: ' + redeemData.error);
                }
                
                connectBtn.textContent = '‚è≥ Connecting...';
                
                console.log('Connecting with redeemed coins:', {
                    coinsInserted: redeemData.totalCoins,
                    totalValue: redeemData.totalValue,
                    duration: totalTime * 60,
                    macAddress: 'auto-detect'
                });
                
                const response = await fetch('/portal/connect', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        coinsInserted: redeemData.totalCoins,
                        totalValue: redeemData.totalValue,
                        duration: totalTime * 60, // Convert to seconds
                        macAddress: 'auto-detect'
                    })
                });
                
                console.log('Connect response status:', response.status);
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                console.log('Connect response data:', data);
                
                if (data.success) {
                    connectBtn.textContent = '‚úÖ Connected!';
                    
                    // Release the slot since we're done
                    if (claimedSlot) {
                        await fetch(`/api/coin-slots/slots/${claimedSlot.slot_number}/release`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                clientIp: clientIP,
                                clientMac: clientMAC
                            })
                        });
                        claimedSlot = null;
                    }
                    
                    setTimeout(() => {
                        closeCoinModal();
                        window.location.reload();
                    }, 1500);
                } else {
                    connectBtn.textContent = '‚ùå Failed: ' + (data.error || 'Unknown error');
                    setTimeout(() => {
                        connectBtn.textContent = '‚ñ∂Ô∏è Connect Now';
                        connectBtn.disabled = false;
                    }, 3000);
                }
            } catch (error) {
                console.error('Connection error:', error);
                connectBtn.textContent = '‚ùå Error: ' + error.message;
                setTimeout(() => {
                    connectBtn.textContent = '‚ñ∂Ô∏è Connect Now';
                    connectBtn.disabled = false;
                }, 3000);
            }
        }
        
        // Close modals when clicking outside
        window.onclick = function(event) {
            const coinModal = document.getElementById('coinModal');
            const ratesModal = document.getElementById('ratesModal');
            
            if (event.target === coinModal) {
                closeCoinModal();
            }
            if (event.target === ratesModal) {
                closeRatesModal();
            }
        }
        
        // Auto-refresh for authenticated users
        <% if (isAuthenticated && clientInfo) { %>
        setInterval(() => {
            fetch('/portal/session-status')
                .then(response => response.json())
                .then(data => {
                    if (data.time_remaining <= 0) {
                        window.location.reload();
                    }
                })
                .catch(error => console.warn('Failed to check session status'));
        }, 60000); // Check every minute
        <% } %>
    </script>
</body>
</html>