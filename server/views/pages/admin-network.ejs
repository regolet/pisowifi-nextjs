<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Network Management - PISOWifi Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <script src="/socket.io/socket.io.js"></script>
</head>
<body class="bg-gray-50 flex h-screen">
    <%- include('../partials/admin-sidebar') %>
    
    <!-- Main Content -->
    <div class="flex-1 overflow-y-auto">
        <div class="p-6">
            <div class="mb-6">
                <h1 class="text-xl font-bold text-black">Network Management</h1>
                <p class="text-sm text-gray-600 mt-1">Configure DHCP, DNS, and monitor network traffic</p>
            </div>

            <!-- Network Status Table -->
            <div class="bg-white border border-gray-200 rounded-lg mb-6">
                <div class="px-4 py-3 border-b border-gray-200">
                    <h2 class="text-sm font-semibold text-black">Network Statistics</h2>
                </div>
                <div class="divide-y divide-gray-200">
                    <div class="px-4 py-3 flex justify-between items-center">
                        <span class="text-sm text-black">DHCP Leases</span>
                        <span class="text-sm font-semibold text-black" id="dhcp-leases">0</span>
                    </div>
                    <div class="px-4 py-3 flex justify-between items-center">
                        <span class="text-sm text-black">Active Interfaces</span>
                        <span class="text-sm font-semibold text-black" id="active-interfaces">0</span>
                    </div>
                    <div class="px-4 py-3 flex justify-between items-center">
                        <span class="text-sm text-black">Total Traffic</span>
                        <span class="text-sm font-semibold text-black" id="total-traffic">0 MB</span>
                    </div>
                    <div class="px-4 py-3 flex justify-between items-center">
                        <span class="text-sm text-black">Limited Users</span>
                        <span class="text-sm font-semibold text-black" id="bandwidth-users">0</span>
                    </div>
                </div>
            </div>

            <!-- DHCP Configuration -->
            <div class="bg-white border border-gray-200 rounded-lg mb-6">
                <div class="px-4 py-3 border-b border-gray-200">
                    <h2 class="text-sm font-semibold text-black">DHCP & DNS Configuration</h2>
                </div>
                <div class="p-4">
            
            <form id="network-config-form" class="space-y-6">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <!-- DHCP Settings -->
                    <div class="space-y-4">
                        <h4 class="text-md font-medium text-gray-800">DHCP Settings</h4>
                        
                        <div>
                            <label class="flex items-center space-x-2">
                                <input type="checkbox" id="dhcp_enabled" class="rounded border-gray-300 text-blue-600 focus:ring-blue-500">
                                <span class="text-gray-700">Enable DHCP Server</span>
                            </label>
                        </div>
                        
                        <div>
                            <label class="block text-gray-700 mb-2">DHCP Range Start</label>
                            <input type="text" id="dhcp_range_start" 
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
                                   placeholder="192.168.100.10">
                        </div>
                        
                        <div>
                            <label class="block text-gray-700 mb-2">DHCP Range End</label>
                            <input type="text" id="dhcp_range_end" 
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
                                   placeholder="192.168.100.200">
                        </div>
                    </div>
                    
                    <!-- Network Settings -->
                    <div class="space-y-4">
                        <h4 class="text-md font-medium text-gray-800">Network Settings</h4>
                        
                        <div>
                            <label class="block text-gray-700 mb-2">Gateway</label>
                            <input type="text" id="gateway" 
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
                                   placeholder="192.168.100.1">
                        </div>
                        
                        <div>
                            <label class="block text-gray-700 mb-2">Primary DNS</label>
                            <input type="text" id="dns_primary" 
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
                                   placeholder="8.8.8.8">
                        </div>
                        
                        <div>
                            <label class="block text-gray-700 mb-2">Secondary DNS</label>
                            <input type="text" id="dns_secondary" 
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
                                   placeholder="8.8.4.4">
                        </div>
                    </div>
                </div>
                
                <div class="flex gap-4">
                    <button type="submit" class="px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors">
                        ðŸ’¾ Save Configuration
                    </button>
                    <button type="button" onclick="restartServices()" class="px-6 py-2 bg-orange-600 hover:bg-orange-700 text-white rounded-lg transition-colors">
                        ðŸ”„ Restart Services
                    </button>
                </div>
            </form>
            </div>
            
            <!-- Network Interfaces -->
            <div class="bg-white rounded-xl shadow-sm border p-6 mb-8">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-800">Network Interfaces</h3>
                    <button onclick="refreshInterfaces()" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors">
                        ðŸ”„ Refresh
                    </button>
                </div>
            
                <div id="interfaces-container" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div class="text-gray-500 text-center py-8">Loading interfaces...</div>
                </div>
            </div>
            
            <!-- Bandwidth Control -->
            <div class="bg-white rounded-xl shadow-sm border p-6">
                <h3 class="text-lg font-semibold text-gray-800 mb-4">Bandwidth Control</h3>
            
                <div class="bg-gray-50 rounded-lg p-4 mb-4">
                    <h4 class="text-md font-medium text-gray-800 mb-4">Apply Bandwidth Limit</h4>
                    <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                        <input type="text" id="limit-client-mac" placeholder="MAC Address" 
                               class="px-3 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500">
                        <input type="number" id="upload-limit" placeholder="Upload (kbps)" 
                               class="px-3 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500">
                        <input type="number" id="download-limit" placeholder="Download (kbps)" 
                               class="px-3 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500">
                        <button onclick="applyBandwidthLimit()" 
                                class="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors">
                            Apply Limit
                        </button>
                    </div>
                </div>
            
                <div class="overflow-x-auto">
                    <table class="w-full">
                        <thead>
                            <tr class="border-b border-gray-200">
                                <th class="text-left py-3 px-4 text-gray-700">Client MAC</th>
                                <th class="text-left py-3 px-4 text-gray-700">IP Address</th>
                                <th class="text-left py-3 px-4 text-gray-700">Upload Rate</th>
                                <th class="text-left py-3 px-4 text-gray-700">Download Rate</th>
                                <th class="text-left py-3 px-4 text-gray-700">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="bandwidth-tbody">
                            <tr>
                                <td colspan="5" class="text-center py-8 text-gray-500">Loading bandwidth data...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <script>
        let networkConfig = {};
        let interfaces = [];
        let bandwidthData = [];

        // Load data on page load
        loadNetworkConfig();
        refreshInterfaces();
        refreshBandwidthMonitoring();

        // Load network configuration
        async function loadNetworkConfig() {
            try {
                const response = await fetch('/api/network/config', {
                    credentials: 'include'
                });
                
                if (response.ok) {
                    networkConfig = await response.json();
                    populateConfigForm();
                }
            } catch (error) {
                console.error('Failed to load network config:', error);
            }
        }

        function populateConfigForm() {
            document.getElementById('dhcp_enabled').checked = networkConfig.dhcp_enabled;
            document.getElementById('dhcp_range_start').value = networkConfig.dhcp_range_start || '';
            document.getElementById('dhcp_range_end').value = networkConfig.dhcp_range_end || '';
            document.getElementById('gateway').value = networkConfig.gateway || '';
            document.getElementById('dns_primary').value = networkConfig.dns_primary || '';
            document.getElementById('dns_secondary').value = networkConfig.dns_secondary || '';
        }

        // Save network configuration
        document.getElementById('network-config-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = {
                dhcp_enabled: document.getElementById('dhcp_enabled').checked,
                dhcp_range_start: document.getElementById('dhcp_range_start').value,
                dhcp_range_end: document.getElementById('dhcp_range_end').value,
                gateway: document.getElementById('gateway').value,
                dns_primary: document.getElementById('dns_primary').value,
                dns_secondary: document.getElementById('dns_secondary').value,
                subnet_mask: '255.255.255.0',
                lease_time: 3600,
                wifi_interface: 'wlan0',
                ethernet_interface: 'eth0'
            };
            
            try {
                const response = await fetch('/api/network/config', {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    credentials: 'include',
                    body: JSON.stringify(formData)
                });
                
                const result = await response.json();
                if (result.success) {
                    alert('Network configuration saved successfully!');
                } else {
                    alert('Failed to save configuration');
                }
            } catch (error) {
                console.error('Save config error:', error);
                alert('Failed to save configuration');
            }
        });

        // Refresh network interfaces
        async function refreshInterfaces() {
            try {
                const response = await fetch('/api/network/interfaces', {
                    credentials: 'include'
                });
                
                if (response.ok) {
                    interfaces = await response.json();
                    updateInterfacesDisplay();
                    updateStats();
                }
            } catch (error) {
                console.error('Failed to load interfaces:', error);
            }
        }

        function updateInterfacesDisplay() {
            const container = document.getElementById('interfaces-container');
            
            if (interfaces.length === 0) {
                container.innerHTML = '<div class="text-white/50 text-center py-8">No interfaces found</div>';
                return;
            }
            
            container.innerHTML = interfaces.map(iface => `
                <div class="bg-gray-50 rounded-lg p-4">
                    <div class="flex justify-between items-center mb-2">
                        <h4 class="text-gray-800 font-medium">${iface.name}</h4>
                        <span class="px-2 py-1 rounded text-xs ${iface.status === 'up' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
                            ${iface.status.toUpperCase()}
                        </span>
                    </div>
                    <div class="space-y-1 text-sm text-gray-600">
                        ${iface.addresses.map(addr => `<div>IP: ${addr}</div>`).join('')}
                    </div>
                </div>
            `).join('');
        }

        // Refresh bandwidth monitoring
        async function refreshBandwidthMonitoring() {
            try {
                const response = await fetch('/api/network/bandwidth-monitor', {
                    credentials: 'include'
                });
                
                if (response.ok) {
                    bandwidthData = await response.json();
                    updateBandwidthDisplay();
                    updateStats();
                }
            } catch (error) {
                console.error('Failed to load bandwidth data:', error);
            }
        }

        function updateBandwidthDisplay() {
            const tbody = document.getElementById('bandwidth-tbody');
            
            if (bandwidthData.length === 0) {
                tbody.innerHTML = '<tr><td colspan="5" class="text-center py-8 text-white/50">No bandwidth limits active</td></tr>';
                return;
            }
            
            tbody.innerHTML = bandwidthData.map(client => `
                <tr class="border-b border-gray-200">
                    <td class="py-3 px-4 font-mono text-sm text-gray-700">${client.mac_address}</td>
                    <td class="py-3 px-4 text-gray-700">${client.ip_address}</td>
                    <td class="py-3 px-4 text-gray-700">${client.upload_rate}</td>
                    <td class="py-3 px-4 text-gray-700">${client.download_rate}</td>
                    <td class="py-3 px-4">
                        <button onclick="removeBandwidthLimit('${client.client_id}')" 
                                class="px-2 py-1 bg-red-600 hover:bg-red-700 text-white rounded text-xs transition-colors">
                            Remove
                        </button>
                    </td>
                </tr>
            `).join('');
        }

        // Update stats
        function updateStats() {
            document.getElementById('active-interfaces').textContent = interfaces.filter(i => i.status === 'up').length;
            document.getElementById('bandwidth-users').textContent = bandwidthData.length;
        }

        // Restart network services
        async function restartServices() {
            if (confirm('Restart network services? This may temporarily disrupt connectivity.')) {
                try {
                    const response = await fetch('/api/network/restart-services', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        credentials: 'include',
                        body: JSON.stringify({ services: ['dnsmasq', 'hostapd'] })
                    });
                    
                    const result = await response.json();
                    if (result.success) {
                        alert('Services restarted successfully!');
                    } else {
                        alert('Some services failed to restart');
                    }
                } catch (error) {
                    alert('Failed to restart services');
                }
            }
        }

        // Apply bandwidth limit
        async function applyBandwidthLimit() {
            const macAddress = document.getElementById('limit-client-mac').value;
            const uploadLimit = document.getElementById('upload-limit').value;
            const downloadLimit = document.getElementById('download-limit').value;
            
            if (!macAddress || !uploadLimit || !downloadLimit) {
                alert('Please fill in all fields');
                return;
            }
            
            try {
                const clientsResponse = await fetch('/api/clients', { credentials: 'include' });
                const clients = await clientsResponse.json();
                const client = clients.find(c => c.mac_address.toLowerCase() === macAddress.toLowerCase());
                
                if (!client) {
                    alert('Client not found');
                    return;
                }
                
                const response = await fetch('/api/network/bandwidth-limit', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    credentials: 'include',
                    body: JSON.stringify({
                        clientId: client.id,
                        uploadLimit: parseInt(uploadLimit),
                        downloadLimit: parseInt(downloadLimit)
                    })
                });
                
                const result = await response.json();
                if (result.success) {
                    alert('Bandwidth limit applied!');
                    document.getElementById('limit-client-mac').value = '';
                    document.getElementById('upload-limit').value = '';
                    document.getElementById('download-limit').value = '';
                    refreshBandwidthMonitoring();
                } else {
                    alert('Failed to apply bandwidth limit');
                }
            } catch (error) {
                alert('Failed to apply bandwidth limit');
            }
        }

        // Auto-refresh every 30 seconds
        setInterval(() => {
            refreshInterfaces();
            refreshBandwidthMonitoring();
        }, 30000);
    </script>
</body>
</html>