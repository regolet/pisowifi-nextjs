<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Client Management - PISOWifi Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <script src="/socket.io/socket.io.js"></script>
    <style>
        .glass {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
    </style>
</head>
<body class="min-h-screen bg-gradient-to-br from-blue-900 via-purple-900 to-indigo-900">
    <%- include('../partials/admin-nav') %>
    
    <div class="container mx-auto px-4 py-8">
        <div class="mb-8">
            <h1 class="text-3xl font-bold text-white mb-2">Client Management</h1>
            <p class="text-white/70">Monitor and manage connected clients</p>
        </div>

        <!-- Stats Cards -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
            <div class="glass rounded-xl p-4">
                <div class="text-2xl font-bold text-white" id="total-clients">0</div>
                <div class="text-white/70 text-sm">Total Clients</div>
            </div>
            <div class="glass rounded-xl p-4">
                <div class="text-2xl font-bold text-green-400" id="connected-clients">0</div>
                <div class="text-white/70 text-sm">Connected</div>
            </div>
            <div class="glass rounded-xl p-4">
                <div class="text-2xl font-bold text-yellow-400" id="paused-clients">0</div>
                <div class="text-white/70 text-sm">Paused</div>
            </div>
            <div class="glass rounded-xl p-4">
                <div class="text-2xl font-bold text-red-400" id="disconnected-clients">0</div>
                <div class="text-white/70 text-sm">Disconnected</div>
            </div>
        </div>

        <!-- Connected Devices -->
        <div class="glass rounded-2xl p-6 mb-8">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-xl font-semibold text-white">Connected Devices</h2>
                <button onclick="refreshClients()" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg">
                    üîÑ Refresh
                </button>
            </div>
            
            <div class="overflow-x-auto">
                <table class="w-full text-white">
                    <thead>
                        <tr class="border-b border-white/20">
                            <th class="text-left py-3 px-4">MAC Address</th>
                            <th class="text-left py-3 px-4">IP Address</th>
                            <th class="text-left py-3 px-4">Status</th>
                            <th class="text-left py-3 px-4">Time Remaining</th>
                            <th class="text-left py-3 px-4">Session Started</th>
                            <th class="text-left py-3 px-4">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="clients-tbody">
                        <tr>
                            <td colspan="6" class="text-center py-8 text-white/50">Loading clients...</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Quick Actions -->
        <div class="glass rounded-2xl p-6">
            <h2 class="text-xl font-semibold text-white mb-4">Quick Actions</h2>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                    <h3 class="text-white/80 mb-2">Grant Free Access</h3>
                    <div class="flex gap-2">
                        <input type="text" id="free-mac" placeholder="MAC Address" 
                               class="flex-1 px-3 py-2 bg-white/10 border border-white/20 rounded-lg text-white">
                        <input type="number" id="free-duration" placeholder="Minutes" value="60"
                               class="w-24 px-3 py-2 bg-white/10 border border-white/20 rounded-lg text-white">
                        <button onclick="grantFreeAccess()" 
                                class="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg">
                            Grant
                        </button>
                    </div>
                </div>
                
                <div>
                    <h3 class="text-white/80 mb-2">Block Device</h3>
                    <div class="flex gap-2">
                        <input type="text" id="block-mac" placeholder="MAC Address" 
                               class="flex-1 px-3 py-2 bg-white/10 border border-white/20 rounded-lg text-white">
                        <button onclick="blockDevice()" 
                                class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg">
                            Block
                        </button>
                    </div>
                </div>
                
                <div>
                    <h3 class="text-white/80 mb-2">Disconnect All</h3>
                    <button onclick="disconnectAll()" 
                            class="w-full px-4 py-2 bg-orange-600 hover:bg-orange-700 text-white rounded-lg">
                        ‚ö†Ô∏è Disconnect All Clients
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        const socket = io();
        let clients = [];

        // Load clients on page load
        loadClients();

        // Socket events for real-time updates
        socket.on('client-connected', () => {
            loadClients();
        });

        socket.on('client-disconnected', () => {
            loadClients();
        });

        async function loadClients() {
            try {
                const response = await fetch('/api/clients', {
                    credentials: 'include'
                });
                
                if (response.ok) {
                    clients = await response.json();
                    updateClientTable();
                    updateStats();
                }
            } catch (error) {
                console.error('Failed to load clients:', error);
            }
        }

        function updateClientTable() {
            const tbody = document.getElementById('clients-tbody');
            
            if (clients.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="6" class="text-center py-8 text-white/50">No clients found</td>
                    </tr>
                `;
                return;
            }
            
            tbody.innerHTML = clients.map(client => `
                <tr class="border-b border-white/10">
                    <td class="py-3 px-4 font-mono text-sm">${client.mac_address}</td>
                    <td class="py-3 px-4">${client.ip_address || '-'}</td>
                    <td class="py-3 px-4">
                        <span class="px-2 py-1 rounded text-xs ${getStatusClass(client.status)}">
                            ${client.status}
                        </span>
                    </td>
                    <td class="py-3 px-4">${formatTime(client.time_remaining)}</td>
                    <td class="py-3 px-4">${formatDate(client.session_start)}</td>
                    <td class="py-3 px-4">
                        <div class="flex gap-2">
                            ${getActionButtons(client)}
                        </div>
                    </td>
                </tr>
            `).join('');
        }

        function updateStats() {
            const total = clients.length;
            const connected = clients.filter(c => c.status === 'CONNECTED').length;
            const paused = clients.filter(c => c.status === 'PAUSED').length;
            const disconnected = clients.filter(c => c.status === 'DISCONNECTED').length;
            
            document.getElementById('total-clients').textContent = total;
            document.getElementById('connected-clients').textContent = connected;
            document.getElementById('paused-clients').textContent = paused;
            document.getElementById('disconnected-clients').textContent = disconnected;
        }

        function getStatusClass(status) {
            switch(status) {
                case 'CONNECTED': return 'bg-green-500 text-white';
                case 'PAUSED': return 'bg-yellow-500 text-white';
                case 'DISCONNECTED': return 'bg-red-500 text-white';
                default: return 'bg-gray-500 text-white';
            }
        }

        function getActionButtons(client) {
            const buttons = [];
            
            if (client.status === 'CONNECTED') {
                buttons.push(`
                    <button onclick="pauseClient(${client.id})" 
                            class="px-3 py-1 bg-yellow-600 hover:bg-yellow-700 text-white rounded text-sm">
                        Pause
                    </button>
                `);
                buttons.push(`
                    <button onclick="disconnectClient(${client.id})" 
                            class="px-3 py-1 bg-red-600 hover:bg-red-700 text-white rounded text-sm">
                        Disconnect
                    </button>
                `);
            } else if (client.status === 'PAUSED') {
                buttons.push(`
                    <button onclick="resumeClient(${client.id})" 
                            class="px-3 py-1 bg-green-600 hover:bg-green-700 text-white rounded text-sm">
                        Resume
                    </button>
                `);
            } else {
                buttons.push(`
                    <button onclick="authenticateClient(${client.id})" 
                            class="px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white rounded text-sm">
                        Authenticate
                    </button>
                `);
            }
            
            buttons.push(`
                <button onclick="deleteClient(${client.id})" 
                        class="px-3 py-1 bg-gray-600 hover:bg-gray-700 text-white rounded text-sm">
                    Delete
                </button>
            `);
            
            return buttons.join('');
        }

        async function pauseClient(id) {
            await fetch(`/api/clients/${id}/pause`, {
                method: 'POST',
                credentials: 'include'
            });
            loadClients();
        }

        async function resumeClient(id) {
            await fetch(`/api/clients/${id}/pause`, {
                method: 'POST',
                credentials: 'include'
            });
            loadClients();
        }

        async function disconnectClient(id) {
            if (confirm('Disconnect this client?')) {
                await fetch(`/api/clients/${id}/disconnect`, {
                    method: 'POST',
                    credentials: 'include'
                });
                loadClients();
            }
        }

        async function authenticateClient(id) {
            const duration = prompt('Enter session duration in seconds:', '3600');
            if (duration) {
                await fetch(`/api/clients/${id}/authenticate`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    credentials: 'include',
                    body: JSON.stringify({ duration: parseInt(duration) })
                });
                loadClients();
            }
        }

        async function deleteClient(id) {
            if (confirm('Delete this client? This cannot be undone.')) {
                await fetch(`/api/clients/${id}`, {
                    method: 'DELETE',
                    credentials: 'include'
                });
                loadClients();
            }
        }

        async function grantFreeAccess() {
            const mac = document.getElementById('free-mac').value;
            const duration = document.getElementById('free-duration').value;
            
            if (!mac) {
                alert('Please enter MAC address');
                return;
            }
            
            // Implementation for granting free access
            alert(`Free access granted to ${mac} for ${duration} minutes`);
            document.getElementById('free-mac').value = '';
        }

        async function blockDevice() {
            const mac = document.getElementById('block-mac').value;
            
            if (!mac) {
                alert('Please enter MAC address');
                return;
            }
            
            // Implementation for blocking device
            alert(`Device ${mac} blocked`);
            document.getElementById('block-mac').value = '';
        }

        async function disconnectAll() {
            if (confirm('Disconnect ALL clients? This will interrupt all active sessions.')) {
                // Implementation for disconnecting all
                alert('All clients disconnected');
                loadClients();
            }
        }

        function refreshClients() {
            loadClients();
        }

        function formatTime(seconds) {
            if (!seconds) return '-';
            const hours = Math.floor(seconds / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            return `${hours}h ${minutes}m`;
        }

        function formatDate(dateStr) {
            if (!dateStr) return '-';
            const date = new Date(dateStr);
            return date.toLocaleString();
        }

        // Auto-refresh every 10 seconds
        setInterval(loadClients, 10000);
    </script>
</body>
</html>