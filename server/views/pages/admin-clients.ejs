<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Client Management - PISOWifi Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <script src="/socket.io/socket.io.js"></script>
</head>
<body class="bg-gray-200 flex h-screen">
    <%- include('../partials/admin-sidebar') %>
    
    <!-- Main Content -->
    <div class="flex-1 overflow-y-auto">
        <div class="p-8">
            <div class="mb-8">
                <h2 class="text-2xl font-bold text-gray-800">Client Management</h2>
                <p class="text-gray-600">Monitor and manage connected clients</p>
            </div>

            <!-- Stats Cards -->
            <div class="grid grid-cols-1 md:grid-cols-5 gap-4 mb-8">
                <div class="bg-gray-50 border border-gray-300 rounded-lg p-4">
                    <div class="text-2xl font-bold text-gray-800" id="total-clients">0</div>
                    <div class="text-gray-600 text-sm">Total Clients</div>
                </div>
                <div class="bg-gray-50 border border-gray-300 rounded-lg p-4">
                    <div class="text-2xl font-bold text-green-600" id="connected-clients">0</div>
                    <div class="text-gray-600 text-sm">Connected</div>
                </div>
                <div class="bg-gray-50 border border-gray-300 rounded-lg p-4">
                    <div class="text-2xl font-bold text-yellow-600" id="paused-clients">0</div>
                    <div class="text-gray-600 text-sm">Paused</div>
                </div>
                <div class="bg-gray-50 border border-gray-300 rounded-lg p-4">
                    <div class="text-2xl font-bold text-red-600" id="disconnected-clients">0</div>
                    <div class="text-gray-600 text-sm">Disconnected</div>
                </div>
                <div class="bg-gray-50 border border-gray-300 rounded-lg p-4">
                    <div class="text-2xl font-bold text-orange-600" id="unauthenticated-clients">0</div>
                    <div class="text-gray-600 text-sm">Unauthenticated</div>
                </div>
            </div>

            <!-- Tab Navigation -->
            <div class="bg-white rounded-t-xl shadow-sm border p-6 mb-0">
                <div class="flex space-x-4 border-b border-gray-200 pb-4">
                    <button onclick="showTab('authenticated')" id="tab-authenticated" class="px-4 py-2 text-blue-600 font-medium border-b-2 border-blue-500">
                        Authenticated Clients
                    </button>
                    <button onclick="showTab('unauthenticated')" id="tab-unauthenticated" class="px-4 py-2 text-gray-600 font-medium hover:text-blue-600">
                        Unauthenticated Devices
                    </button>
                </div>
            </div>
        
        <!-- Authenticated Clients Tab -->
        <div id="authenticated-tab" class="glass rounded-b-2xl p-6 mb-8">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-xl font-semibold text-black">Authenticated Clients</h2>
                <div class="flex gap-2">
                    <button onclick="cleanupInactiveClients()" class="px-4 py-2 bg-orange-600 hover:bg-orange-700 text-black rounded-lg">
                        üóëÔ∏è Cleanup
                    </button>
                    <button onclick="refreshClients()" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-black rounded-lg">
                        üîÑ Refresh
                    </button>
                </div>
            </div>
            
            <div class="overflow-x-auto">
                <table class="w-full text-black">
                    <thead>
                        <tr class="border-b border-gray-300">
                            <th class="text-left py-3 px-4">Device</th>
                            <th class="text-left py-3 px-4">MAC/IP Address</th>
                            <th class="text-left py-3 px-4">Status</th>
                            <th class="text-left py-3 px-4">Time Remaining</th>
                            <th class="text-left py-3 px-4">Last Seen</th>
                            <th class="text-left py-3 px-4">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="clients-tbody">
                        <tr>
                            <td colspan="6" class="text-center py-8 text-gray-600">Loading clients...</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        
        <!-- Unauthenticated Devices Tab -->
        <div id="unauthenticated-tab" class="glass rounded-b-2xl p-6 mb-8 hidden">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-xl font-semibold text-black">Unauthenticated Devices</h2>
                <button onclick="refreshUnauthenticatedDevices()" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-black rounded-lg">
                    üîÑ Scan Network
                </button>
            </div>
            
            <div class="overflow-x-auto">
                <table class="w-full text-black">
                    <thead>
                        <tr class="border-b border-gray-300">
                            <th class="text-left py-3 px-4">Device Info</th>
                            <th class="text-left py-3 px-4">MAC Address</th>
                            <th class="text-left py-3 px-4">IP Address</th>
                            <th class="text-left py-3 px-4">Vendor</th>
                            <th class="text-left py-3 px-4">First Seen</th>
                            <th class="text-left py-3 px-4">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="unauthenticated-tbody">
                        <tr>
                            <td colspan="6" class="text-center py-8 text-gray-600">Click 'Scan Network' to detect devices</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Quick Actions -->
        <div class="glass rounded-2xl p-6">
            <h2 class="text-xl font-semibold text-black mb-4">Quick Actions</h2>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                    <h3 class="text-gray-800 mb-2">Grant Free Access</h3>
                    <div class="flex gap-2">
                        <input type="text" id="free-mac" placeholder="MAC Address" 
                               class="flex-1 px-3 py-2 bg-gray-100 border border-gray-300 rounded-lg text-black">
                        <input type="number" id="free-duration" placeholder="Minutes" value="60"
                               class="w-24 px-3 py-2 bg-gray-100 border border-gray-300 rounded-lg text-black">
                        <button onclick="grantFreeAccess()" 
                                class="px-4 py-2 bg-green-600 hover:bg-green-700 text-black rounded-lg">
                            Grant
                        </button>
                    </div>
                </div>
                
                <div>
                    <h3 class="text-gray-800 mb-2">Block Device</h3>
                    <div class="flex gap-2">
                        <input type="text" id="block-mac" placeholder="MAC Address" 
                               class="flex-1 px-3 py-2 bg-gray-100 border border-gray-300 rounded-lg text-black">
                        <button onclick="blockDevice()" 
                                class="px-4 py-2 bg-red-600 hover:bg-red-700 text-black rounded-lg">
                            Block
                        </button>
                    </div>
                </div>
                
                <div>
                    <h3 class="text-gray-800 mb-2">Disconnect All</h3>
                    <button onclick="disconnectAll()" 
                            class="w-full px-4 py-2 bg-orange-600 hover:bg-orange-700 text-black rounded-lg">
                        ‚ö†Ô∏è Disconnect All Clients
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        const socket = io();
        let clients = [];

        // Load clients on page load
        loadClients();

        // Socket events for real-time updates
        socket.on('client-connected', () => {
            loadClients();
        });

        socket.on('client-disconnected', () => {
            loadClients();
        });

        async function loadClients() {
            try {
                const response = await fetch('/api/clients', {
                    credentials: 'include'
                });
                
                if (response.ok) {
                    clients = await response.json();
                    updateClientTable();
                    updateStats();
                }
            } catch (error) {
                console.error('Failed to load clients:', error);
            }
        }

        function updateClientTable() {
            const tbody = document.getElementById('clients-tbody');
            
            if (clients.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="6" class="text-center py-8 text-gray-600">No clients found</td>
                    </tr>
                `;
                return;
            }
            
            tbody.innerHTML = clients.map(client => `
                <tr class="border-b border-white/10 hover:bg-white/5">
                    <td class="py-3 px-4">
                        <div class="flex flex-col">
                            <div class="font-medium text-black">${client.device_name || 'Unknown Device'}</div>
                            <div class="text-sm text-gray-700">${client.os || 'Unknown OS'}</div>
                            <div class="text-xs text-gray-600">${client.browser || 'Unknown Browser'}</div>
                        </div>
                    </td>
                    <td class="py-3 px-4">
                        <div class="font-mono text-sm">${client.mac_address}</div>
                        <div class="text-sm text-gray-700">${client.ip_address || '-'}</div>
                    </td>
                    <td class="py-3 px-4">
                        <span class="px-2 py-1 rounded text-xs ${getStatusClass(client.status)}">
                            ${client.status}
                        </span>
                        ${client.is_whitelisted ? '<div class="text-xs text-green-400 mt-1">Whitelisted</div>' : ''}
                        ${client.is_blocked ? '<div class="text-xs text-red-400 mt-1">Blocked</div>' : ''}
                    </td>
                    <td class="py-3 px-4">${formatTime(client.time_remaining)}</td>
                    <td class="py-3 px-4">
                        <div class="text-sm">${formatDate(client.last_seen)}</div>
                        <div class="text-xs text-gray-600" title="${client.session_started}">
                            ${client.session_started ? 'Session: ' + formatTimeAgo(client.session_started) : '-'}
                        </div>
                    </td>
                    <td class="py-3 px-4">
                        <div class="flex flex-wrap gap-1">
                            ${getActionButtons(client)}
                            <button onclick="showClientDetails(${client.id})" 
                                    class="px-2 py-1 bg-purple-600 hover:bg-purple-700 text-black rounded text-xs">
                                Info
                            </button>
                        </div>
                    </td>
                </tr>
            `).join('');
        }

        function updateStats() {
            const total = clients.length;
            const connected = clients.filter(c => c.status === 'CONNECTED').length;
            const paused = clients.filter(c => c.status === 'PAUSED').length;
            const disconnected = clients.filter(c => c.status === 'DISCONNECTED').length;
            const unauthenticated = unauthenticatedDevices.length;
            
            document.getElementById('total-clients').textContent = total;
            document.getElementById('connected-clients').textContent = connected;
            document.getElementById('paused-clients').textContent = paused;
            document.getElementById('disconnected-clients').textContent = disconnected;
            document.getElementById('unauthenticated-clients').textContent = unauthenticated;
        }

        function getStatusClass(status) {
            switch(status) {
                case 'CONNECTED': return 'bg-green-500 text-black';
                case 'PAUSED': return 'bg-yellow-500 text-black';
                case 'DISCONNECTED': return 'bg-red-500 text-black';
                default: return 'bg-gray-500 text-black';
            }
        }

        function getActionButtons(client) {
            const buttons = [];
            
            if (client.status === 'CONNECTED') {
                buttons.push(`
                    <button onclick="pauseClient(${client.id})" 
                            class="px-2 py-1 bg-yellow-600 hover:bg-yellow-700 text-black rounded text-xs">
                        Pause
                    </button>
                `);
                buttons.push(`
                    <button onclick="disconnectClient(${client.id})" 
                            class="px-2 py-1 bg-red-600 hover:bg-red-700 text-black rounded text-xs">
                        Stop
                    </button>
                `);
            } else if (client.status === 'PAUSED') {
                buttons.push(`
                    <button onclick="resumeClient(${client.id})" 
                            class="px-2 py-1 bg-green-600 hover:bg-green-700 text-black rounded text-xs">
                        Resume
                    </button>
                `);
            } else {
                buttons.push(`
                    <button onclick="authenticateClient(${client.id})" 
                            class="px-2 py-1 bg-blue-600 hover:bg-blue-700 text-black rounded text-xs">
                        Auth
                    </button>
                `);
            }
            
            if (!client.is_whitelisted) {
                buttons.push(`
                    <button onclick="whitelistClient(${client.id})" 
                            class="px-2 py-1 bg-green-500 hover:bg-green-600 text-black rounded text-xs">
                        Whitelist
                    </button>
                `);
            }
            
            if (!client.is_blocked) {
                buttons.push(`
                    <button onclick="blockClient(${client.id})" 
                            class="px-2 py-1 bg-red-500 hover:bg-red-600 text-black rounded text-xs">
                        Block
                    </button>
                `);
            }
            
            return buttons.join('');
        }

        async function pauseClient(id) {
            await fetch(`/api/clients/${id}/pause`, {
                method: 'POST',
                credentials: 'include'
            });
            loadClients();
        }

        async function resumeClient(id) {
            await fetch(`/api/clients/${id}/pause`, {
                method: 'POST',
                credentials: 'include'
            });
            loadClients();
        }

        async function disconnectClient(id) {
            if (confirm('Disconnect this client?')) {
                await fetch(`/api/clients/${id}/disconnect`, {
                    method: 'POST',
                    credentials: 'include'
                });
                loadClients();
            }
        }

        async function authenticateClient(id) {
            const duration = prompt('Enter session duration in seconds:', '3600');
            if (duration) {
                await fetch(`/api/clients/${id}/authenticate`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    credentials: 'include',
                    body: JSON.stringify({ duration: parseInt(duration) })
                });
                loadClients();
            }
        }

        async function deleteClient(id) {
            if (confirm('Delete this client? This cannot be undone.')) {
                await fetch(`/api/clients/${id}`, {
                    method: 'DELETE',
                    credentials: 'include'
                });
                loadClients();
            }
        }

        async function grantFreeAccess() {
            const mac = document.getElementById('free-mac').value;
            const duration = document.getElementById('free-duration').value;
            
            if (!mac) {
                alert('Please enter MAC address');
                return;
            }
            
            // Implementation for granting free access
            alert(`Free access granted to ${mac} for ${duration} minutes`);
            document.getElementById('free-mac').value = '';
        }

        async function blockDevice() {
            const mac = document.getElementById('block-mac').value;
            
            if (!mac) {
                alert('Please enter MAC address');
                return;
            }
            
            // Implementation for blocking device
            alert(`Device ${mac} blocked`);
            document.getElementById('block-mac').value = '';
        }

        async function disconnectAll() {
            if (confirm('Disconnect ALL clients? This will interrupt all active sessions.')) {
                // Implementation for disconnecting all
                alert('All clients disconnected');
                loadClients();
            }
        }

        function refreshClients() {
            loadClients();
        }

        function formatTime(seconds) {
            if (!seconds) return '-';
            const hours = Math.floor(seconds / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            return `${hours}h ${minutes}m`;
        }

        function formatDate(dateStr) {
            if (!dateStr) return '-';
            const date = new Date(dateStr);
            return date.toLocaleString();
        }

        let unauthenticatedDevices = [];
        let currentTab = 'authenticated';
        
        // Tab management
        function showTab(tabName) {
            // Hide all tabs
            document.getElementById('authenticated-tab').classList.add('hidden');
            document.getElementById('unauthenticated-tab').classList.add('hidden');
            
            // Remove active styles from all tab buttons
            document.getElementById('tab-authenticated').classList.remove('border-b-2', 'border-blue-500', 'text-black');
            document.getElementById('tab-authenticated').classList.add('text-gray-700');
            document.getElementById('tab-unauthenticated').classList.remove('border-b-2', 'border-blue-500', 'text-black');
            document.getElementById('tab-unauthenticated').classList.add('text-gray-700');
            
            // Show selected tab
            document.getElementById(tabName + '-tab').classList.remove('hidden');
            document.getElementById('tab-' + tabName).classList.add('border-b-2', 'border-blue-500', 'text-black');
            document.getElementById('tab-' + tabName).classList.remove('text-gray-700');
            
            currentTab = tabName;
            
            if (tabName === 'unauthenticated') {
                refreshUnauthenticatedDevices();
            }
        }
        
        // Load unauthenticated devices
        async function refreshUnauthenticatedDevices() {
            try {
                const response = await fetch('/api/clients/unauthenticated', {
                    credentials: 'include'
                });
                
                if (response.ok) {
                    unauthenticatedDevices = await response.json();
                    updateUnauthenticatedTable();
                    updateStats();
                }
            } catch (error) {
                console.error('Failed to load unauthenticated devices:', error);
            }
        }
        
        function updateUnauthenticatedTable() {
            const tbody = document.getElementById('unauthenticated-tbody');
            
            if (unauthenticatedDevices.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="6" class="text-center py-8 text-gray-600">No unauthenticated devices found</td>
                    </tr>
                `;
                return;
            }
            
            tbody.innerHTML = unauthenticatedDevices.map(device => `
                <tr class="border-b border-white/10 hover:bg-white/5">
                    <td class="py-3 px-4">
                        <div class="text-sm text-gray-700">Unknown Device</div>
                        <div class="text-xs text-gray-600">Not registered</div>
                    </td>
                    <td class="py-3 px-4 font-mono text-sm">${device.mac_address}</td>
                    <td class="py-3 px-4 text-sm">${device.ip_address}</td>
                    <td class="py-3 px-4 text-sm text-gray-700">${device.vendor || 'Unknown'}</td>
                    <td class="py-3 px-4 text-sm">${formatDate(device.first_seen)}</td>
                    <td class="py-3 px-4">
                        <div class="flex gap-1">
                            <button onclick="authenticateUnauthenticatedDevice('${device.mac_address}', '${device.ip_address}')" 
                                    class="px-2 py-1 bg-green-600 hover:bg-green-700 text-black rounded text-xs">
                                Allow
                            </button>
                            <button onclick="blockUnauthenticatedDevice('${device.mac_address}')" 
                                    class="px-2 py-1 bg-red-600 hover:bg-red-700 text-black rounded text-xs">
                                Block
                            </button>
                        </div>
                    </td>
                </tr>
            `).join('');
        }
        
        async function showClientDetails(id) {
            try {
                const [historyResponse, analyticsResponse] = await Promise.all([
                    fetch(`/api/clients/${id}/history`, { credentials: 'include' }),
                    fetch(`/api/clients/${id}/analytics`, { credentials: 'include' })
                ]);
                
                const history = await historyResponse.json();
                const analytics = await analyticsResponse.json();
                
                const client = clients.find(c => c.id === id);
                
                alert(`Client Details:\n\nDevice: ${client.device_name}\nOS: ${client.os}\nBrowser: ${client.browser}\nTotal Sessions: ${analytics.stats.total_sessions}\nTotal Time: ${formatTime(analytics.stats.total_time)}\nTotal Spent: $${analytics.stats.total_spent || 0}`);
            } catch (error) {
                console.error('Failed to get client details:', error);
                alert('Failed to load client details');
            }
        }
        
        async function cleanupInactiveClients() {
            if (confirm('Clean up clients inactive for more than 30 days?')) {
                try {
                    const response = await fetch('/api/clients/cleanup', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        credentials: 'include',
                        body: JSON.stringify({ olderThanDays: 30, inactiveOnly: true })
                    });
                    
                    const result = await response.json();
                    alert(`Cleaned up ${result.deleted} inactive clients`);
                    loadClients();
                } catch (error) {
                    console.error('Cleanup failed:', error);
                    alert('Cleanup failed');
                }
            }
        }
        
        async function whitelistClient(id) {
            const reason = prompt('Enter reason for whitelisting:', 'Admin approved');
            if (reason) {
                try {
                    await fetch(`/api/clients/${id}/whitelist`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        credentials: 'include',
                        body: JSON.stringify({ reason })
                    });
                    loadClients();
                } catch (error) {
                    console.error('Whitelist failed:', error);
                }
            }
        }
        
        async function blockClient(id) {
            const reason = prompt('Enter reason for blocking:', 'Admin blocked');
            if (reason) {
                try {
                    await fetch(`/api/clients/${id}/block`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        credentials: 'include',
                        body: JSON.stringify({ reason })
                    });
                    loadClients();
                } catch (error) {
                    console.error('Block failed:', error);
                }
            }
        }
        
        function formatTimeAgo(dateStr) {
            if (!dateStr) return '-';
            const now = new Date();
            const date = new Date(dateStr);
            const diffMs = now - date;
            const diffMins = Math.floor(diffMs / 60000);
            const diffHours = Math.floor(diffMins / 60);
            const diffDays = Math.floor(diffHours / 24);
            
            if (diffDays > 0) return `${diffDays}d ago`;
            if (diffHours > 0) return `${diffHours}h ago`;
            if (diffMins > 0) return `${diffMins}m ago`;
            return 'Just now';
        }
        
        async function authenticateUnauthenticatedDevice(macAddress, ipAddress) {
            const duration = prompt('Enter session duration in seconds:', '3600');
            if (duration) {
                try {
                    // Create client and authenticate
                    const response = await fetch('/portal/connect', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            macAddress: macAddress,
                            coinsInserted: 0, // Free access
                            duration: parseInt(duration),
                            deviceInfo: { userAgent: 'Admin authenticated device' }
                        })
                    });
                    
                    if (response.ok) {
                        alert(`Device ${macAddress} authenticated for ${duration} seconds`);
                        refreshUnauthenticatedDevices();
                        loadClients();
                    } else {
                        alert('Failed to authenticate device');
                    }
                } catch (error) {
                    console.error('Authentication failed:', error);
                    alert('Authentication failed');
                }
            }
        }
        
        async function blockUnauthenticatedDevice(macAddress) {
            if (confirm(`Block device ${macAddress}? This will permanently prevent access.`)) {
                try {
                    // This would add the device to the blocked list
                    // For now, we'll simulate the action
                    alert(`Device ${macAddress} blocked`);
                    refreshUnauthenticatedDevices();
                } catch (error) {
                    console.error('Block failed:', error);
                    alert('Block failed');
                }
            }
        }
        
        // Auto-refresh every 30 seconds
        setInterval(() => {
            if (currentTab === 'authenticated') {
                loadClients();
            } else if (currentTab === 'unauthenticated') {
                refreshUnauthenticatedDevices();
            }
        }, 30000);
    </script>
</body>
</html>