<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Coin Slots & Queues - PISOWifi Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <script src="/socket.io/socket.io.js"></script>
    <style>
        .slot-available { @apply bg-green-100 border-green-300 text-green-800; }
        .slot-claimed { @apply bg-yellow-100 border-yellow-300 text-yellow-800; }
        .slot-active { @apply bg-blue-100 border-blue-300 text-blue-800; }
        .coin-queue-item { @apply bg-gray-50 border border-gray-200 rounded p-3 mb-2; }
        .status-badge { @apply px-2 py-1 rounded-full text-xs font-medium; }
        .refresh-animation { animation: spin 1s linear infinite; }
        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
    </style>
</head>
<body class="bg-gray-100 flex h-screen">
    
    <!-- Include Admin Sidebar -->
    <%- include('../partials/admin-sidebar', {currentPage}) %>
    
    <!-- Main Content -->
    <div class="flex-1 flex flex-col overflow-hidden">
        
        <!-- Header -->
        <div class="bg-white shadow-sm border-b border-gray-300 px-6 py-4">
            <div class="flex justify-between items-center">
                <div>
                    <h1 class="text-2xl font-semibold text-gray-800">Coin Slots & Queues</h1>
                    <p class="text-gray-600 text-sm">Monitor coin slot status and client queues</p>
                </div>
                <div class="flex space-x-3">
                    <button onclick="refreshData()" class="px-4 py-2 border border-gray-300 text-gray-700 bg-white rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <span id="refreshIcon">ðŸ”„</span> Refresh
                    </button>
                    <button onclick="cleanupExpired()" class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500">
                        ðŸ§¹ Cleanup Expired
                    </button>
                </div>
            </div>
        </div>
        
        <!-- Content Area -->
        <div class="flex-1 overflow-auto p-6">
            
            <!-- Statistics Cards -->
            <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
                <div class="bg-white rounded-lg shadow p-6">
                    <div class="flex items-center">
                        <div class="p-2 bg-green-100 rounded-md">
                            <span class="text-2xl">âœ…</span>
                        </div>
                        <div class="ml-4">
                            <h2 class="text-sm font-medium text-gray-600">Available Slots</h2>
                            <p id="availableSlots" class="text-2xl font-semibold text-gray-900">-</p>
                        </div>
                    </div>
                </div>
                
                <div class="bg-white rounded-lg shadow p-6">
                    <div class="flex items-center">
                        <div class="p-2 bg-yellow-100 rounded-md">
                            <span class="text-2xl">ðŸ”’</span>
                        </div>
                        <div class="ml-4">
                            <h2 class="text-sm font-medium text-gray-600">Claimed Slots</h2>
                            <p id="claimedSlots" class="text-2xl font-semibold text-gray-900">-</p>
                        </div>
                    </div>
                </div>
                
                <div class="bg-white rounded-lg shadow p-6">
                    <div class="flex items-center">
                        <div class="p-2 bg-blue-100 rounded-md">
                            <span class="text-2xl">ðŸª™</span>
                        </div>
                        <div class="ml-4">
                            <h2 class="text-sm font-medium text-gray-600">Queued Coins</h2>
                            <p id="queuedCoins" class="text-2xl font-semibold text-gray-900">-</p>
                        </div>
                    </div>
                </div>
                
                <div class="bg-white rounded-lg shadow p-6">
                    <div class="flex items-center">
                        <div class="p-2 bg-purple-100 rounded-md">
                            <span class="text-2xl">ðŸ’°</span>
                        </div>
                        <div class="ml-4">
                            <h2 class="text-sm font-medium text-gray-600">Queue Value</h2>
                            <p id="queueValue" class="text-2xl font-semibold text-gray-900">â‚±0.00</p>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Physical Coin Slots Table -->
            <div class="bg-white rounded-lg shadow mb-6">
                <div class="px-6 py-4 border-b border-gray-200">
                    <h3 class="text-lg font-medium text-gray-900">Physical Coin Slots</h3>
                    <p class="text-sm text-gray-500">Real-time status of physical coin slot hardware (Orange Pi Standalone)</p>
                </div>
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Coin Slot
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Status
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Time Remaining
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    MAC Address
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    IP Address
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Queued Coins
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Actions
                                </th>
                            </tr>
                        </thead>
                        <tbody id="coinSlotsTable" class="bg-white divide-y divide-gray-200">
                            <!-- Coin slots will be populated here -->
                        </tbody>
                    </table>
                </div>
            </div>
            
            <!-- Active Coin Queues -->
            <div class="bg-white rounded-lg shadow">
                <div class="px-6 py-4 border-b border-gray-200">
                    <h3 class="text-lg font-medium text-gray-900">Active Coin Queues</h3>
                    <p class="text-sm text-gray-500">Clients with queued coins ready for redemption</p>
                </div>
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Client Info
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Coin Slot
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    MAC Address
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Queued Coins
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Total Value
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Queue Status
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Time Queued
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Actions
                                </th>
                            </tr>
                        </thead>
                        <tbody id="coinQueuesTable" class="bg-white divide-y divide-gray-200">
                            <!-- Coin queues will be populated here -->
                        </tbody>
                    </table>
                </div>
            </div>
            
        </div>
    </div>

    <script>
        let socket;
        let coinSlotsData = [];
        let coinQueuesData = [];
        
        // Initialize Socket.IO
        try {
            socket = io();
            
            socket.on('connect', function() {
                console.log('Connected to server for real-time updates');
            });
            
            socket.on('coin-slot-claimed', function(data) {
                console.log('Coin slot claimed:', data);
                refreshData();
            });
            
            socket.on('coin-slot-released', function(data) {
                console.log('Coin slot released:', data);
                refreshData();
            });
            
            socket.on('coin-added', function(data) {
                console.log('Coin added to queue:', data);
                refreshData();
            });
            
            socket.on('coins-redeemed', function(data) {
                console.log('Coins redeemed:', data);
                refreshData();
            });
        } catch (error) {
            console.warn('Socket.IO connection failed:', error);
        }
        
        // Load data on page load
        document.addEventListener('DOMContentLoaded', function() {
            refreshData();
            
            // Auto-refresh every 30 seconds
            setInterval(refreshData, 30000);
        });
        
        async function refreshData() {
            const refreshIcon = document.getElementById('refreshIcon');
            refreshIcon.classList.add('refresh-animation');
            
            try {
                await Promise.all([
                    loadCoinSlots(),
                    loadCoinQueues()
                ]);
                updateStatistics();
            } catch (error) {
                console.error('Failed to refresh data:', error);
                showNotification('Failed to refresh data', 'error');
            } finally {
                refreshIcon.classList.remove('refresh-animation');
            }
        }
        
        async function loadCoinSlots() {
            try {
                const response = await fetch('/api/coin-slots/slots');
                const data = await response.json();
                
                if (data.success) {
                    coinSlotsData = data.slots;
                    renderCoinSlots();
                } else {
                    throw new Error(data.error);
                }
            } catch (error) {
                console.error('Failed to load coin slots:', error);
                throw error;
            }
        }
        
        async function loadCoinQueues() {
            try {
                // Get detailed coin queues data
                const response = await fetch('/api/coin-slots/queues');
                const data = await response.json();
                
                if (data.success) {
                    coinQueuesData = data.queues || [];
                    renderCoinQueues();
                } else {
                    throw new Error(data.error || 'Failed to load coin queues');
                }
            } catch (error) {
                console.error('Failed to load coin queues:', error);
                // Fallback to extracting from slot data
                coinQueuesData = [];
                coinSlotsData.forEach(slot => {
                    if (slot.queued_coins && slot.queued_coins.length > 0) {
                        slot.queued_coins.forEach(queue => {
                            coinQueuesData.push({
                                ...queue,
                                slot_number: slot.slot_number,
                                claimed_by_ip: slot.claimed_by_ip,
                                claimed_by_mac: slot.claimed_by_mac
                            });
                        });
                    }
                });
                renderCoinQueues();
            }
        }
        
        function renderCoinSlots() {
            const container = document.getElementById('coinSlotsTable');
            
            if (coinSlotsData.length === 0) {
                container.innerHTML = '<tr><td colspan="7" class="text-center py-8 text-gray-500">No coin slots configured</td></tr>';
                return;
            }
            
            // Filter to show only slot 1 for Orange Pi standalone
            const orangePiSlots = coinSlotsData.filter(slot => slot.slot_number === 1);
            
            container.innerHTML = orangePiSlots.map(slot => {
                const statusBadge = getStatusBadge(slot.status);
                const queueCount = slot.queued_coins ? slot.queued_coins.length : 0;
                const queueValue = slot.queued_coins ? 
                    slot.queued_coins.reduce((sum, q) => sum + parseFloat(q.total_value), 0).toFixed(2) : '0.00';
                
                // Calculate time remaining from expires_at
                let timeRemaining = '';
                if (slot.status === 'claimed' && slot.expires_at) {
                    const now = new Date();
                    const expiresAt = new Date(slot.expires_at);
                    const remainingMs = expiresAt - now;
                    
                    if (remainingMs > 0) {
                        const minutes = Math.floor(remainingMs / 60000);
                        const seconds = Math.floor((remainingMs % 60000) / 1000);
                        timeRemaining = `${minutes}:${seconds.toString().padStart(2, '0')}`;
                    } else {
                        timeRemaining = 'Expired';
                    }
                } else if (slot.status === 'available') {
                    timeRemaining = '-';
                } else {
                    timeRemaining = 'N/A';
                }
                
                return `
                    <tr class="hover:bg-gray-50">
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="flex items-center">
                                <div class="text-2xl mr-3">ðŸª™</div>
                                <div>
                                    <div class="text-sm font-medium text-gray-900">Slot ${slot.slot_number}</div>
                                    <div class="text-sm text-gray-500">Physical Hardware</div>
                                </div>
                            </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            ${statusBadge}
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="text-sm font-medium text-gray-900" id="timer-${slot.slot_number}">
                                ${timeRemaining}
                            </div>
                            ${slot.status === 'claimed' ? `
                                <div class="text-xs text-gray-500">
                                    ${slot.expires_at ? new Date(slot.expires_at).toLocaleTimeString() : ''}
                                </div>
                            ` : ''}
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="text-sm font-mono text-gray-900">
                                ${slot.claimed_by_mac || '-'}
                            </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="text-sm text-gray-900">
                                ${slot.claimed_by_ip || '-'}
                            </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="text-sm text-gray-900">
                                ${queueCount > 0 ? `${queueCount} coins` : '-'}
                            </div>
                            ${queueCount > 0 ? `
                                <div class="text-sm text-green-600 font-medium">â‚±${queueValue}</div>
                            ` : ''}
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            ${slot.status === 'claimed' ? `
                                <button onclick="releaseSlot(${slot.slot_number})" 
                                        class="text-red-600 hover:text-red-900 mr-3">
                                    Release
                                </button>
                            ` : ''}
                            ${queueCount > 0 ? `
                                <button onclick="redeemQueue('${slot.claimed_by_ip}', '${slot.claimed_by_mac || ''}')" 
                                        class="text-green-600 hover:text-green-900">
                                    Redeem
                                </button>
                            ` : ''}
                        </td>
                    </tr>
                `;
            }).join('');
            
            // Start countdown timers
            startCountdownTimers();
        }
        
        function getStatusBadge(status) {
            switch(status) {
                case 'available':
                    return '<span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800">Available</span>';
                case 'claimed':
                    return '<span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-yellow-100 text-yellow-800">Claimed</span>';
                case 'active':
                    return '<span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800">Active</span>';
                default:
                    return '<span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-gray-100 text-gray-800">Unknown</span>';
            }
        }
        
        function startCountdownTimers() {
            // Clear existing timers
            if (window.countdownTimers) {
                window.countdownTimers.forEach(timer => clearInterval(timer));
            }
            window.countdownTimers = [];
            
            // Start new timers for claimed slots
            coinSlotsData.forEach(slot => {
                if (slot.status === 'claimed' && slot.expires_at) {
                    const timerId = setInterval(() => {
                        updateSlotTimer(slot.slot_number, slot.expires_at);
                    }, 1000);
                    window.countdownTimers.push(timerId);
                }
            });
        }
        
        function updateSlotTimer(slotNumber, expiresAt) {
            const timerElement = document.getElementById(`timer-${slotNumber}`);
            if (!timerElement) return;
            
            const now = new Date();
            const expiresAtDate = new Date(expiresAt);
            const remainingMs = expiresAtDate - now;
            
            if (remainingMs > 0) {
                const minutes = Math.floor(remainingMs / 60000);
                const seconds = Math.floor((remainingMs % 60000) / 1000);
                timerElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
                timerElement.className = 'text-sm font-medium text-yellow-600';
            } else {
                timerElement.textContent = 'Expired';
                timerElement.className = 'text-sm font-medium text-red-600';
                // Refresh data when timer expires
                setTimeout(refreshData, 1000);
            }
        }
        
        function renderCoinQueues() {
            const container = document.getElementById('coinQueuesTable');
            
            if (coinQueuesData.length === 0) {
                container.innerHTML = '<tr><td colspan="8" class="text-center py-8 text-gray-500">No active coin queues</td></tr>';
                return;
            }
            
            // Group queues by client (IP + MAC combination)
            const groupedQueues = {};
            coinQueuesData.forEach(queue => {
                const clientKey = `${queue.client_ip || queue.claimed_by_ip}-${queue.client_mac || queue.claimed_by_mac}`;
                if (!groupedQueues[clientKey]) {
                    groupedQueues[clientKey] = {
                        client_ip: queue.client_ip || queue.claimed_by_ip,
                        client_mac: queue.client_mac || queue.claimed_by_mac,
                        slot_number: queue.slot_number || queue.slot_id,
                        queues: []
                    };
                }
                groupedQueues[clientKey].queues.push(queue);
            });
            
            container.innerHTML = Object.values(groupedQueues).map(clientData => {
                const totalCoins = clientData.queues.reduce((sum, q) => sum + (q.coin_count || 1), 0);
                const totalValue = clientData.queues.reduce((sum, q) => sum + parseFloat(q.total_value || q.coin_value || 0), 0);
                const oldestQueue = clientData.queues.reduce((oldest, current) => {
                    return new Date(current.created_at) < new Date(oldest.created_at) ? current : oldest;
                });
                const queueStatus = clientData.queues.every(q => q.status === 'queued') ? 'Ready' : 'Processing';
                
                return `
                    <tr class="hover:bg-gray-50">
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="flex items-center">
                                <div class="text-2xl mr-3">ðŸ‘¤</div>
                                <div>
                                    <div class="text-sm font-medium text-gray-900">Client ${clientData.client_ip || 'Unknown'}</div>
                                    <div class="text-sm text-gray-500">
                                        ${clientData.queues.length} queue${clientData.queues.length > 1 ? 's' : ''}
                                    </div>
                                </div>
                            </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="flex items-center">
                                <div class="text-lg mr-2">ðŸª™</div>
                                <div class="text-sm font-medium text-gray-900">
                                    Slot ${clientData.slot_number || 1}
                                </div>
                            </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="text-sm font-mono text-gray-900">
                                ${clientData.client_mac || '-'}
                            </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="text-sm text-gray-900">
                                ${totalCoins} coin${totalCoins > 1 ? 's' : ''}
                            </div>
                            <div class="text-xs text-gray-500">
                                ${clientData.queues.map(q => `â‚±${q.coin_value || 0} Ã— ${q.coin_count || 1}`).join(', ')}
                            </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="text-sm font-semibold text-green-600">
                                â‚±${totalValue.toFixed(2)}
                            </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                                queueStatus === 'Ready' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'
                            }">
                                ${queueStatus}
                            </span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="text-sm text-gray-900">
                                ${new Date(oldestQueue.created_at).toLocaleTimeString()}
                            </div>
                            <div class="text-xs text-gray-500">
                                ${Math.floor((new Date() - new Date(oldestQueue.created_at)) / 60000)}m ago
                            </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <button onclick="redeemQueue('${clientData.client_ip}', '${clientData.client_mac || ''}')" 
                                    class="text-green-600 hover:text-green-900 mr-3">
                                Redeem All
                            </button>
                            <button onclick="viewQueueDetails('${clientData.client_ip}', '${clientData.client_mac || ''}')" 
                                    class="text-blue-600 hover:text-blue-900">
                                Details
                            </button>
                        </td>
                    </tr>
                `;
            }).join('');
        }
        
        function viewQueueDetails(clientIp, clientMac) {
            const clientQueues = coinQueuesData.filter(q => 
                (q.client_ip === clientIp || q.claimed_by_ip === clientIp) && 
                (q.client_mac === clientMac || q.claimed_by_mac === clientMac)
            );
            
            const detailsHtml = clientQueues.map(queue => `
                <div class="border rounded p-3 mb-2">
                    <div class="flex justify-between items-center">
                        <div>
                            <span class="font-medium">â‚±${queue.coin_value || 0} Ã— ${queue.coin_count || 1}</span>
                            <span class="text-gray-500 text-sm ml-2">
                                ${new Date(queue.created_at).toLocaleString()}
                            </span>
                        </div>
                        <div class="text-green-600 font-medium">
                            â‚±${parseFloat(queue.total_value || queue.coin_value || 0).toFixed(2)}
                        </div>
                    </div>
                </div>
            `).join('');
            
            const modal = document.createElement('div');
            modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
            modal.innerHTML = `
                <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4">
                    <h3 class="text-lg font-semibold mb-4">Queue Details - ${clientIp}</h3>
                    <div class="max-h-60 overflow-y-auto">
                        ${detailsHtml}
                    </div>
                    <div class="mt-4 flex justify-end space-x-2">
                        <button onclick="this.closest('.fixed').remove()" 
                                class="px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400">
                            Close
                        </button>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
        }
        
        function updateStatistics() {
            const availableCount = coinSlotsData.filter(s => s.status === 'available').length;
            const claimedCount = coinSlotsData.filter(s => s.status === 'claimed').length;
            
            let totalQueuedCoins = 0;
            let totalQueueValue = 0;
            
            coinSlotsData.forEach(slot => {
                if (slot.queued_coins) {
                    totalQueuedCoins += slot.queued_coins.reduce((sum, q) => sum + q.coin_count, 0);
                    totalQueueValue += slot.queued_coins.reduce((sum, q) => sum + parseFloat(q.total_value), 0);
                }
            });
            
            document.getElementById('availableSlots').textContent = availableCount;
            document.getElementById('claimedSlots').textContent = claimedCount;
            document.getElementById('queuedCoins').textContent = totalQueuedCoins;
            document.getElementById('queueValue').textContent = 'â‚±' + totalQueueValue.toFixed(2);
        }
        
        async function releaseSlot(slotNumber) {
            if (!confirm(`Release slot ${slotNumber}?`)) return;
            
            try {
                const response = await fetch(`/api/coin-slots/slots/${slotNumber}/release`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({})
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showNotification(`Slot ${slotNumber} released successfully`, 'success');
                    refreshData();
                } else {
                    showNotification(`Failed to release slot: ${data.error}`, 'error');
                }
            } catch (error) {
                console.error('Release slot error:', error);
                showNotification('Failed to release slot', 'error');
            }
        }
        
        async function redeemQueue(clientIp, clientMac) {
            if (!confirm('Redeem all queued coins for this client?')) return;
            
            try {
                const response = await fetch('/api/coin-slots/queues/redeem', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        clientIp: clientIp,
                        clientMac: clientMac || null
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showNotification(`Redeemed ${data.totalCoins} coins worth â‚±${data.totalValue.toFixed(2)}`, 'success');
                    refreshData();
                } else {
                    showNotification(`Failed to redeem coins: ${data.error}`, 'error');
                }
            } catch (error) {
                console.error('Redeem queue error:', error);
                showNotification('Failed to redeem coins', 'error');
            }
        }
        
        async function cleanupExpired() {
            if (!confirm('Cleanup expired slots and queues?')) return;
            
            try {
                const response = await fetch('/api/coin-slots/cleanup', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showNotification(`Cleanup completed: ${data.releasedSlots} slots, ${data.expiredQueues} queues`, 'success');
                    refreshData();
                } else {
                    showNotification(`Cleanup failed: ${data.error}`, 'error');
                }
            } catch (error) {
                console.error('Cleanup error:', error);
                showNotification('Cleanup failed', 'error');
            }
        }
        
        function showNotification(message, type = 'info') {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 px-4 py-3 rounded-md shadow-lg z-50 ${
                type === 'success' ? 'bg-green-100 text-green-800 border border-green-200' :
                type === 'error' ? 'bg-red-100 text-red-800 border border-red-200' :
                'bg-blue-100 text-blue-800 border border-blue-200'
            }`;
            notification.textContent = message;
            
            document.body.appendChild(notification);
            
            // Auto-remove after 3 seconds
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 3000);
        }
    </script>
    
</body>
</html>